(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{407:function(t,e,s){"use strict";s.r(e);var a=s(14),n=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"重要对象及关键源码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#重要对象及关键源码"}},[t._v("#")]),t._v(" 重要对象及关键源码")]),t._v(" "),e("h2",{attrs:{id:"运行时重要对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#运行时重要对象"}},[t._v("#")]),t._v(" 运行时重要对象")]),t._v(" "),e("p",[t._v("在CPython虚拟机运行期间，比较重要的一些对象包括：")]),t._v(" "),e("ol",[e("li",[t._v("​"),e("code",[t._v("Code Object")]),t._v("​：表示Python源代码的编译结果，包括字节码指令、常量池、变量名等信息，是Python程序的执行单位。")]),t._v(" "),e("li",[t._v("​"),e("code",[t._v("Frame Object")]),t._v("​：表示函数调用时的栈帧，保存了函数的局部变量、参数、返回地址、当前行号等信息，是Python虚拟机执行代码时的基本单位。")]),t._v(" "),e("li",[t._v("​"),e("code",[t._v("Function Object")]),t._v("​：表示函数对象，保存了函数的代码、全局变量等信息，是一种可调用的对象。")]),t._v(" "),e("li",[t._v("​"),e("code",[t._v("Module Object")]),t._v("​：表示模块对象，保存了模块的全局变量、函数等信息。")]),t._v(" "),e("li",[t._v("​"),e("code",[t._v("Type Object")]),t._v("​：表示类型对象，是 Python 对象模型的基石之一，每个对象都有一个对应的类型对象，决定了对象所能够支持的操作和行为。类型对象本身也是 Python 对象，其类型是 "),e("code",[t._v("type")]),t._v("​。")]),t._v(" "),e("li",[t._v("​"),e("code",[t._v("Class Object")]),t._v("​：表示类对象，在 Python 中，每个类都有一个对应的类对象，类对象包含了类定义中的所有方法和属性。类对象也是一个 Python 对象，其类型是 "),e("code",[t._v("type")]),t._v("​。")])]),t._v(" "),e("p",[t._v("这些对象之间的关系如下：")]),t._v(" "),e("ul",[e("li",[t._v("​"),e("code",[t._v("Code Object")]),t._v("​对象是函数对象和模块对象的核心组成部分，描述了函数或模块的执行流程、变量名等信息。")]),t._v(" "),e("li",[t._v("​"),e("code",[t._v("Function Object")]),t._v("​对象是一个可调用对象，与"),e("code",[t._v("Code Object")]),t._v("​对象关联，保存了函数的代码、全局变量等信息，同时可以通过函数名称访问。")]),t._v(" "),e("li",[t._v("​"),e("code",[t._v("Module Object")]),t._v("​对象是一个全局作用域，保存了模块的全局变量、函数等信息，同时也是一个命名空间，可以通过模块名称访问。")]),t._v(" "),e("li",[t._v("​"),e("code",[t._v("Frame Object")]),t._v("​对象保存了函数调用时的信息，包括函数的局部变量、参数、返回地址、当前行号等信息，同时也维护了函数调用栈的状态，是Python虚拟机执行代码时的基本单位，每个栈帧与一个"),e("code",[t._v("Code Object")]),t._v("​对象相关联，同时也可以访问上层栈帧的变量信息。")]),t._v(" "),e("li",[t._v("类型对象是所有 Python 对象的基类，所有对象都有一个对应的类型对象，类型对象之间也可以存在继承关系；")]),t._v(" "),e("li",[t._v("类对象是创建实例对象的工厂，实例对象包含了对应的类对象、属性和方法等；")])]),t._v(" "),e("p",[t._v("‍")]),t._v(" "),e("h2",{attrs:{id:"pycodeobject"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pycodeobject"}},[t._v("#")]),t._v(" PyCodeObject")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Bytecode object */")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    PyObject_HEAD\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" co_argcount"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("            "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 参数个数 #arguments, except *args */")]),t._v(" \n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" co_kwonlyargcount"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 关键字参数个数 #keyword only arguments */")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" co_nlocals"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("             "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 局部变量个数 #local variables */")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" co_stacksize"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("           "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 执行代码所需栈空间 #entries needed for evaluation stack */")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" co_flags"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("               "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 标识 CO_..., see below */")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" co_firstlineno"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("         "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 代码块首行行号 first source line number */")]),t._v("\n    PyObject "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("co_code"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("          "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 指令操作码，也就是字节码 instruction opcodes */")]),t._v("\n    PyObject "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("co_consts"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 常量列表 list (constants used) */")]),t._v("\n    PyObject "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("co_names"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("         "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 名字列表 list of strings (names used) */")]),t._v("\n    PyObject "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("co_varnames"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 局部变量名列表 tuple of strings (local variable names) */")]),t._v("\n    PyObject "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("co_freevars"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* tuple of strings (free variable names) */")]),t._v("\n    PyObject "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("co_cellvars"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* tuple of strings (cell variable names) */")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* The rest aren't used in either hash or comparisons, except for co_name,\n       used in both. This is done to preserve the name and line number\n       for tracebacks and debuggers; otherwise, constant de-duplication\n       would collapse identical functions/lambdas defined on different lines.\n    */")]),t._v("\n    Py_ssize_t "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("co_cell2arg"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Maps cell vars which are arguments. */")]),t._v("\n    PyObject "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("co_filename"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* unicode (where it was loaded from) */")]),t._v("\n    PyObject "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("co_name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("          "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* unicode (name, for reference) */")]),t._v("\n    PyObject "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("co_lnotab"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* string (encoding addr<->lineno mapping) See\n                                   Objects/lnotab_notes.txt for details. */")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("co_zombieframe"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* for optimization only (see frameobject.c) */")]),t._v("\n    PyObject "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("co_weakreflist"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* to support weakrefs to code objects */")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Scratch space for extra data relating to the code object.\n       Type is a void* to keep the format private in codeobject.c to force\n       people to go through the proper APIs. */")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("co_extra"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" PyCodeObject"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("‍")]),t._v(" "),e("p",[t._v("‍")]),t._v(" "),e("h2",{attrs:{id:"pyeval-evalframeex"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pyeval-evalframeex"}},[t._v("#")]),t._v(" PyEval_EvalFrameEx")]),t._v(" "),e("p",[t._v("PyEval_EvalFrameEx 函数最终调用 _PyEval_EvalFrameDefault 函数执行 frame 对象上的代码对象。虽然它体量巨大，超过 3 千行代码，逻辑却非常直白 —— 内部由无限 for 循环逐条遍历并处理字节码，每执行完一条字节码就自增 f_lasti 字段。")]),t._v(" "),e("p",[t._v("‍")])])}),[],!1,null,null,null);e.default=n.exports}}]);