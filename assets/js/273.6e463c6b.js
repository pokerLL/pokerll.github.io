(window.webpackJsonp=window.webpackJsonp||[]).push([[273],{552:function(e,t,a){"use strict";a.r(t);var i=a(14),n=Object(i.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"init-py-最佳实践"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#init-py-最佳实践"}},[e._v("#")]),e._v(" "),t("strong",[e._v("init")]),e._v(".py 最佳实践")]),e._v(" "),t("h2",{attrs:{id:"原文"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原文"}},[e._v("#")]),e._v(" 原文")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://coderslegacy.com/python-init-py-best-practices/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://coderslegacy.com/python-init-py-best-practices/ - CodersLegacy"),t("OutboundLink")],1)])]),e._v(" "),t("p",[e._v("‍")]),e._v(" "),t("h2",{attrs:{id:"when-to-use-init-py"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#when-to-use-init-py"}},[e._v("#")]),e._v(" When to use __init__.py?")]),e._v(" "),t("p",[e._v("Before we continue any further, let us build some intuition on why the __init__.py is needed, and when to use it.")]),e._v(" "),t("p",[e._v("Scenario: We have a large scale application, which involves 50+ different Python files, each file representing a single class, or module within the code. All of these files look very messy within a single folder, thus we would like to group and divide them into smaller subfolders.")]),e._v(" "),t("blockquote",[t("p",[e._v("项目比较大的时候适合好好琢磨怎么用__init__.py文件去管理我们的import")])]),e._v(" "),t("p",[e._v("Here is a sample folder structure that you might try creating:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("my_large_application/\n│\n├── models/\n│   ├── file1_model.py\n│   ├── file2_model.py\n│   └── ...\n│\n├── controllers/\n│   ├── file3_controller.py\n│   ├── file4_controller.py\n│   └── ...\n│\n└── main.py\n")])])]),t("p",[e._v("But this raises another problem. How do we manage our imports? For example, how does the main.py file import the other files in the subfolders? How does a file from a subfolder (e.g. models) import a file from another subfolder (e.g. controllers)?")]),e._v(" "),t("p",[e._v("Let’s start with the first example, on how to import a file from a subfolder into the main.py file. The following line of code is a valid import statement that will import all of the contents of the file1_model.py into the main.py file.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("from models.file1_model import *\n")])])]),t("p",[e._v("(Don’t include the .py extension in the file name when importing)")]),e._v(" "),t("p",[e._v("However, with our current folder setup, this command will fail, and the following error will be thrown.")]),e._v(" "),t("p",[e._v("This is where the __init__.py file comes in. Right now, the folder “models” is not being treated as a package by Python. The term “package” in this context refers to a folder containing Python files and scripts. In order to have the “models” folder detected as a package from which files can be imported, we have to add an __init__.py file inside it. We don’t have to put anything inside the __init__.py file. Just create any empty file, and rename it to __init__.py.")]),e._v(" "),t("blockquote",[t("p",[e._v("python3导入时不强制要求有__init__.py文件")])]),e._v(" "),t("p",[e._v("We will also do the same for the controllers folder, so our new folder structure should like this:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("my_large_application/\n│\n\n│\n├── models/\n│   ├── __init__.py\n│   ├── file1_model.py\n│   ├── file2_model.py\n│   └── ...\n│\n├── controllers/\n│   ├── __init__.py\n│   ├── file3_controller.py\n│   ├── file4_controller.py\n│   └── ...\n│\n\n└── main.py\n")])])]),t("p",[e._v("And now our import statements will work just fine, for both the model and controller folders.")]),e._v(" "),t("p",[e._v("‍")]),e._v(" "),t("h2",{attrs:{id:"importing-files-from-a-sub-directory-into-another-sub-directory"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#importing-files-from-a-sub-directory-into-another-sub-directory"}},[e._v("#")]),e._v(" Importing Files from a Sub-directory into another Sub-directory")]),e._v(" "),t("p",[e._v("Now that we know how to import files from the subfolders into main.py, lets explore how to import files between sub-folders. Don’t worry, it’s actually pretty easy.")]),e._v(" "),t("blockquote",[t("p",[e._v("来研究研究如何在子包之间互导")])]),e._v(" "),t("p",[e._v("Scenario: We want to import the contents of file1_model.py into file3_controller.py.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("from models.file1_model import *\n")])])]),t("p",[e._v("This command will fail if the __init__.py file is missing from either on these subfolders.")]),e._v(" "),t("p",[e._v("Do not think that "),t("strong",[e._v("init")]),e._v(".py is only meant for large-scale applications. Even small scale application should keep themselves organized. Furthermore, developers who are responsible for creating or managing packages (e.g. a library) will also need to understand how to use and configure this file.")]),e._v(" "),t("blockquote",[t("p",[e._v("即使小项目应该好好用__init__.py来处理import")])]),e._v(" "),t("p",[e._v("‍")]),e._v(" "),t("h2",{attrs:{id:"customizing-the-init-py-file"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#customizing-the-init-py-file"}},[e._v("#")]),e._v(" Customizing the __init__.py File")]),e._v(" "),t("blockquote",[t("p",[e._v("最佳实践来了")])]),e._v(" "),t("p",[e._v("Now that we have discussed the essentials, we will explore some optional statements we can include into our __init__.py file to customize its behavior.")]),e._v(" "),t("h3",{attrs:{id:"_1-adding-package-level-variables"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-adding-package-level-variables"}},[e._v("#")]),e._v(" 1. Adding Package-Level Variables")]),e._v(" "),t("blockquote",[t("p",[e._v("添加包级别的变量")])]),e._v(" "),t("p",[e._v("You can use the "),t("code",[e._v("__init__.py")]),e._v("​ file to define variables that are accessible throughout the package. For example:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('# __init__.py\n\n# Package-level variable\npackage_variable = "This is a package-level variable."\n')])])]),t("p",[e._v("Now you can access it from another file (e.g. main.py file located in the same directory as the package):")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('# main.py\n\nfrom your_package import package_variable\n\n# Using the package-level variable\nprint(f"The value of the package variable is: {package_variable}")\n')])])]),t("p",[e._v("‍")]),e._v(" "),t("h3",{attrs:{id:"_2-improving-readability-of-imports"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-improving-readability-of-imports"}},[e._v("#")]),e._v(" 2. Improving Readability of Imports")]),e._v(" "),t("blockquote",[t("p",[e._v("在__init__.py中导入一般需要导入的子包内容，让import更丝滑")])]),e._v(" "),t("p",[e._v("Now, let’s talk about improving the way you import modules. In the "),t("code",[e._v("__init__.py")]),e._v("​ file, you can tidy up your imports, making them more concise. In "),t("code",[e._v("main.py")]),e._v("​, you can then directly access functions from these modules without specifying the module, creating a cleaner and more readable code structure.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("# __init__.py\n\n# Importing modules for easier access\nfrom .module1 import function1\nfrom .module2 import function2\n")])])]),t("p",[e._v("Now you can directly import these functions:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("# main.py\n\nfrom your_package import function1, function2\n\n# Using the functions from the modules\nfunction1()\nfunction2()\n")])])]),t("p",[e._v("‍")]),e._v(" "),t("h3",{attrs:{id:"_3-executing-custom-code-on-package-import"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-executing-custom-code-on-package-import"}},[e._v("#")]),e._v(" 3. Executing Custom Code on Package Import")]),e._v(" "),t("blockquote",[t("p",[e._v("执行一些自定义的代码")])]),e._v(" "),t("p",[e._v("Sometimes, you may want to execute specific code when your package is imported. The "),t("code",[e._v("__init__.py")]),e._v("​ file provides the perfect spot for such initialization code.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('# __init__.py\n\n# Code to execute on package import\nprint("This will be executed when the package is imported.")\n')])])]),t("p",[e._v("In "),t("code",[e._v("main.py")]),e._v("​, simply importing a function from your package will trigger this code, offering a seamless way to set things up.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("# main.py\n\nfrom your_package import function1\n\n# Importing a function triggers the code in __init__.py\n")])])]),t("p",[e._v("Output (after running main.py)")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("This will be executed when the package is imported.\n")])])]),t("p",[e._v("‍")]),e._v(" "),t("h3",{attrs:{id:"_4-package-initialization-with-all​"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-package-initialization-with-all​"}},[e._v("#")]),e._v(" 4. Package Initialization with "),t("code",[e._v("all")]),e._v("​")]),e._v(" "),t("blockquote",[t("p",[e._v("使用"),t("code",[e._v("__all__")]),e._v("​来控制"),t("code",[e._v("import *")]),e._v("​可以导入的内容")])]),e._v(" "),t("p",[e._v("When you want to control which modules get imported when using the "),t("code",[e._v("from your_package import *")]),e._v("​ syntax, you can use the "),t("code",[e._v("all")]),e._v("​ variable in your "),t("code",[e._v("__init__.py")]),e._v("​ file. This variable takes a list of modules you wish to be available for import. This is useful in cases where you wish some modules to only be available internally (within the package).")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("# __init__.py\n\n__all__ = ['module1', 'module2']\n")])])]),t("p",[e._v("In "),t("code",[e._v("main.py")]),e._v("​, you can then import all the specified modules easily using the "),t("code",[e._v("*")]),e._v("​ syntax:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("# main.py\n\nfrom your_package import *\n\n# Using functions from module1 and module2\nfunction1()\nfunction2()\n")])])]),t("p",[e._v("‍")]),e._v(" "),t("h3",{attrs:{id:"_5-dynamic-importing"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-dynamic-importing"}},[e._v("#")]),e._v(" 5. Dynamic Importing")]),e._v(" "),t("blockquote",[t("p",[e._v("动态导入")])]),e._v(" "),t("p",[e._v("Implement dynamic importing based on certain conditions or configurations. This can be useful for selectively importing modules or functions based on runtime conditions. This feature would be useful in scenarios such as cross-compatibility between platforms, or version differences (old python versions) requiring backward compatibility.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("# __init__.py\n\n# Dynamic importing based on a configuration\nif CONFIGURATION == 'A':\n    from .module_a import *\nelif CONFIGURATION == 'B':\n    from .module_b import *\nelse:\n    raise ImportError(\"Invalid configuration\")\n")])])]),t("p",[e._v("‍")]),e._v(" "),t("h3",{attrs:{id:"_6-alias-module-imports"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-alias-module-imports"}},[e._v("#")]),e._v(" 6. Alias Module Imports")]),e._v(" "),t("blockquote",[t("p",[e._v("为import 别名")])]),e._v(" "),t("p",[e._v("Create aliases for modules or functions, making them more user-friendly or providing backward compatibility.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("# __init__.py\n\nfrom . import module1 as m1\nfrom . import module2 as m2\n")])])]),t("p",[e._v("We can now import it from the main file as the following:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("# main.py\n\nfrom your_package import *\n\n# Using functions from module1 and module2\nfunction1()\nfunction2()\n")])])]),t("p",[e._v("‍")]),e._v(" "),t("h3",{attrs:{id:"_7-initializing-external-libraries"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-initializing-external-libraries"}},[e._v("#")]),e._v(" 7. Initializing External Libraries")]),e._v(" "),t("blockquote",[t("p",[e._v("可以用来初始化外部的库")])]),e._v(" "),t("p",[e._v("Initialize and configure external libraries or dependencies when the package is imported. This helps encapsulate setup tasks and ensures they are executed consistently.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("# __init__.py\n\n# Initializing an external library\nimport external_library\n\nexternal_library.setup()\n")])])]),t("p",[e._v("‍")])])}),[],!1,null,null,null);t.default=n.exports}}]);