(window.webpackJsonp=window.webpackJsonp||[]).push([[282],{561:function(_,t,v){"use strict";v.r(t);var r=v(14),e=Object(r.a)({},(function(){var _=this,t=_._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"命名规范"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#命名规范"}},[_._v("#")]),_._v(" 命名规范")]),_._v(" "),t("h2",{attrs:{id:"命名规范-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#命名规范-2"}},[_._v("#")]),_._v(" 命名规范")]),_._v(" "),t("p",[t("strong",[_._v("应该避免的名称")])]),_._v(" "),t("ol",[t("li",[_._v("单字符名称, 除了计数器和迭代器,作为 "),t("code",[_._v("try/except")]),_._v("​​​ 中异常声明的 "),t("code",[_._v("e")]),_._v("​​​,作为 "),t("code",[_._v("with")]),_._v("​​​ 语句中文件句柄的 "),t("code",[_._v("f")]),_._v("​​​.")]),_._v(" "),t("li",[_._v("包/模块名中的连字符(-)")]),_._v(" "),t("li",[_._v("双下划线开头并结尾的名称(Python保留, 例如"),t("code",[_._v("__init__")]),_._v("​)")])]),_._v(" "),t("p",[t("strong",[_._v("命名约定")])]),_._v(" "),t("ol",[t("li",[_._v('所谓"内部(Internal)"表示仅模块内可用，或者，在类内是保护或私有的.')]),_._v(" "),t("li",[_._v("用单下划线(_)开头表示模块变量或函数是protected的(使用from module import *时不会包含).")]),_._v(" "),t("li",[_._v("用双下划线(__)开头的实例变量或方法表示类内私有.")]),_._v(" "),t("li",[_._v("将相关的类和顶级函数放在同一个模块里. 不像"),t("code",[_._v("Java")]),_._v("​, 没必要限制一个类一个模块.")]),_._v(" "),t("li",[_._v("对类名使用大写字母开头的单词(如"),t("code",[_._v("CapWords")]),_._v("​, 即Pascal风格), 但是模块名应该用小写加下划线的方式(如"),t("code",[_._v("lower_with_under.py")]),_._v("​). 尽管已经有很多现存的模块使用类似于CapWords.py这样的命名, 但现在已经不鼓励这样做, 因为如果模块名碰巧和类名一致, 这会让人困扰.")])]),_._v(" "),t("p",[t("strong",[_._v("文件名")])]),_._v(" "),t("ol",[t("li",[_._v("所有python脚本文件都应该以 "),t("code",[_._v(".py>")]),_._v("​ 为后缀名且不包含 "),t("code",[_._v("-")]),_._v("​.")])]),_._v(" "),t("p",[_._v("‍")]),_._v(" "),t("h2",{attrs:{id:"python之父guido推荐的规范"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#python之父guido推荐的规范"}},[_._v("#")]),_._v(" "),t("strong",[_._v("Python之父Guido推荐的规范")])]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("Type")]),_._v(" "),t("th",[_._v("Public")]),_._v(" "),t("th",[_._v("Internal")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("Modules")]),_._v(" "),t("td",[_._v("lower_with_under")]),_._v(" "),t("td",[_._v("_lower_with_under")])]),_._v(" "),t("tr",[t("td",[_._v("Packages")]),_._v(" "),t("td",[_._v("lower_with_under")]),_._v(" "),t("td")]),_._v(" "),t("tr",[t("td",[_._v("Classes")]),_._v(" "),t("td",[_._v("CapWords")]),_._v(" "),t("td",[_._v("_CapWords")])]),_._v(" "),t("tr",[t("td",[_._v("Exceptions")]),_._v(" "),t("td",[_._v("CapWords")]),_._v(" "),t("td")]),_._v(" "),t("tr",[t("td",[_._v("Functions")]),_._v(" "),t("td",[_._v("lower_with_under()")]),_._v(" "),t("td",[_._v("_lower_with_under()")])]),_._v(" "),t("tr",[t("td",[_._v("Global/Class Constants")]),_._v(" "),t("td",[_._v("CAPS_WITH_UNDER")]),_._v(" "),t("td",[_._v("_CAPS_WITH_UNDER")])]),_._v(" "),t("tr",[t("td",[_._v("Global/Class Variables")]),_._v(" "),t("td",[_._v("lower_with_under")]),_._v(" "),t("td",[_._v("_lower_with_under")])]),_._v(" "),t("tr",[t("td",[_._v("Instance Variables")]),_._v(" "),t("td",[_._v("lower_with_under")]),_._v(" "),t("td",[_._v("_lower_with_under (protected) or __lower_with_under (private)")])]),_._v(" "),t("tr",[t("td",[_._v("Method Names")]),_._v(" "),t("td",[_._v("lower_with_under()")]),_._v(" "),t("td",[_._v("_lower_with_under() (protected) or __lower_with_under() (private)")])]),_._v(" "),t("tr",[t("td",[_._v("Function/Method Parameters")]),_._v(" "),t("td",[_._v("lower_with_under")]),_._v(" "),t("td")]),_._v(" "),t("tr",[t("td",[_._v("Local Variables")]),_._v(" "),t("td",[_._v("lower_with_under")]),_._v(" "),t("td")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);