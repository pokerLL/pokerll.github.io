(window.webpackJsonp=window.webpackJsonp||[]).push([[352],{630:function(t,s,a){"use strict";a.r(s);var n=a(14),r=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"类型注解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型注解"}},[t._v("#")]),t._v(" 类型注解")]),t._v(" "),s("h2",{attrs:{id:"概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),s("p",[t._v("函数注解是Python 3中的一个特性，它允许开发人员在函数定义中包含元数据，这些元数据可以提供有关函数参数和返回值的额外信息。")]),t._v(" "),s("p",[t._v("函数注解使用冒号（:）在参数名称后面，后跟注解表达式来指定元数据。注解表达式可以是任何合法的Python表达式，它通常是一个字符串或类型。")]),t._v(" "),s("p",[t._v("例如，下面是一个带有函数注解的Python函数定义：")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("greet")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello, "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" name\n")])])]),s("p",[t._v("在这个示例中，参数name和返回值都有注解。参数name的注解是一个字符串类型的注解，指定了函数的参数类型。返回值的注解也是一个字符串类型的注解，指定了函数的返回类型。")]),t._v(" "),s("p",[t._v("需要注意的是，函数注解并不会在Python中执行任何特定的操作。它们仅仅是一个提供元数据的机制，Python解释器不会强制执行注解表达式。开发人员可以使用注解来提供额外的文档和类型信息，也可以使用它们来实现一些自定义的行为。")]),t._v(" "),s("p",[t._v("即编译器不会对注解做任何处理，只是将其存储入函数的"),s("code",[t._v("__annotations__")]),t._v("​属性中。")]),t._v(" "),s("p",[t._v("虽然函数注解在Python中并不是必需的，但是它们可以提高代码的可读性和可维护性，尤其是在大型项目中，使用函数注解可以帮助开发人员更好地理解和使用函数。")]),t._v(" "),s("p",[t._v("‍")]),t._v(" "),s("h2",{attrs:{id:"提取函数签名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#提取函数签名"}},[t._v("#")]),t._v(" 提取函数签名")]),t._v(" "),s("h3",{attrs:{id:"signature"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#signature"}},[t._v("#")]),t._v(" signature")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v("\"\"\"\n>>> from func_sig import fun \n>>> from inspect import signature\n>>> sig = signature(fun) \n>>> sig\n<Signature (text, max_len: int = 180, *args, **kwargs)>\n>>> str(sig) \n'(text, max_len: int = 180, *args, **kwargs)'\n>>> for name,param in sig.parameters.items():\n...     print(param.kind,':',name,'=',param.default)\n... \nPOSITIONAL_OR_KEYWORD : text = <class 'inspect._empty'>\nPOSITIONAL_OR_KEYWORD : max_len = 180\nVAR_POSITIONAL : args = <class 'inspect._empty'>\nVAR_KEYWORD : kwargs = <class 'inspect._empty'>\n\"\"\"")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fun")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" max_len"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("180")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("kwargs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pass")]),t._v("\n")])])]),s("h3",{attrs:{id:"annotations-​"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#annotations-​"}},[t._v("#")]),t._v(" "),s("code",[t._v("__annotations__")]),t._v("​")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""\n>>> fun.__annotations__\n{\'max_len\': <class \'int\'>}\n"""')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fun")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" max_len"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("180")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("kwargs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pass")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);