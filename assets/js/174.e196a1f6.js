(window.webpackJsonp=window.webpackJsonp||[]).push([[174],{453:function(t,a,e){"use strict";e.r(a);var s=e(14),n=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"核心概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#核心概念"}},[t._v("#")]),t._v(" 核心概念")]),t._v(" "),a("h2",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),a("p",[t._v("Python re库是一个正则表达式库，主要用于处理字符串匹配和搜索。它包含一些核心类和核心函数以及方法，下面是它们的简单介绍：")]),t._v(" "),a("h2",{attrs:{id:"核心类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#核心类"}},[t._v("#")]),t._v(" 核心类")]),t._v(" "),a("ol",[a("li",[t._v("​"),a("code",[t._v("re.Pattern")]),t._v("​: 正则表达式的编译结果，包含了正则表达式的解析结果，可以用来进行匹配操作。")]),t._v(" "),a("li",[t._v("​"),a("code",[t._v("re.Match")]),t._v("​: 匹配结果，包含匹配的起始和结束位置等信息，可以用来提取匹配结果。")])]),t._v(" "),a("h2",{attrs:{id:"核心函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#核心函数"}},[t._v("#")]),t._v(" 核心函数")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("​"),a("code",[t._v("re.compile()")]),t._v("​​: 将正则表达式编译成一个"),a("code",[t._v("re.Pattern")]),t._v("​​对象。")])]),t._v(" "),a("li",[a("p",[t._v("​"),a("code",[t._v("re.match()")]),t._v("​​: 从字符串的起始位置开始尝试匹配正则表达式，如果成功返回一个"),a("code",[t._v("re.Match")]),t._v("​​对象，否则返回None。")])]),t._v(" "),a("li",[a("p",[t._v("​"),a("code",[t._v("re.search()")]),t._v("​​: 扫描整个字符串，尝试匹配正则表达式，如果成功返回一个"),a("code",[t._v("re.Match")]),t._v("​​对象，否则返回None。")])]),t._v(" "),a("li",[a("p",[t._v("​"),a("code",[t._v("re.findall()")]),t._v("​​: 返回一个列表，包含字符串中所有匹配正则表达式的子串。")])]),t._v(" "),a("li",[a("p",[t._v("​"),a("code",[t._v("re.finditer()")]),t._v("​​: 返回一个迭代器，迭代器的每个元素都是一个"),a("code",[t._v("re.Match")]),t._v("​​对象，表示字符串中一个匹配正则表达式的子串。")])]),t._v(" "),a("li",[a("p",[t._v("​"),a("code",[t._v("re.sub")]),t._v("​")]),t._v(" "),a("div",{staticClass:"language-powershell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-powershell"}},[a("code",[t._v("import re\n\ntext = "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello, my name is John. I like programming and John."')]),t._v("\n\ndef to_uppercase"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("match"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(":\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" match"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("group")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("upper"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\npattern = r"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'John'")]),t._v("\nnew_text = re"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sub"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pattern"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" to_uppercase"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nprint"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Original Text:"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nprint"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"New Text:"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" new_text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("‍")])])]),t._v(" "),a("h2",{attrs:{id:"核心方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#核心方法"}},[t._v("#")]),t._v(" 核心方法")]),t._v(" "),a("ol",[a("li",[t._v("​"),a("code",[t._v("re.Pattern.match()")]),t._v("​: 从字符串的起始位置开始尝试匹配正则表达式，如果成功返回一个"),a("code",[t._v("re.Match")]),t._v("​对象，否则返回None。")]),t._v(" "),a("li",[t._v("​"),a("code",[t._v("re.Pattern.search()")]),t._v("​: 扫描整个字符串，尝试匹配正则表达式，如果成功返回一个"),a("code",[t._v("re.Match")]),t._v("​对象，否则返回None。")]),t._v(" "),a("li",[t._v("​"),a("code",[t._v("re.Pattern.findall()")]),t._v("​: 返回一个列表，包含字符串中所有匹配正则表达式的子串。")]),t._v(" "),a("li",[t._v("​"),a("code",[t._v("re.Pattern.finditer()")]),t._v("​: 返回一个迭代器，迭代器的每个元素都是一个"),a("code",[t._v("re.Match")]),t._v("​对象，表示字符串中一个匹配正则表达式的子串。")]),t._v(" "),a("li",[t._v("​"),a("code",[t._v("re.Match.group()")]),t._v("​: 返回整个匹配对象或指定子组的匹配字符串。")]),t._v(" "),a("li",[t._v("​"),a("code",[t._v("re.Match.groups()")]),t._v("​: 返回所有子组匹配字符串的元组。")]),t._v(" "),a("li",[t._v("​"),a("code",[t._v("re.Match.groupdict()")]),t._v("​: 返回一个字典，包含所有命名捕获组的子组匹配字符串。")]),t._v(" "),a("li",[t._v("​"),a("code",[t._v("re.Match.start()")]),t._v("​: 返回匹配子串在原字符串中的起始位置。")]),t._v(" "),a("li",[t._v("​"),a("code",[t._v("re.Match.end()")]),t._v("​: 返回匹配子串在原字符串中的结束位置。")]),t._v(" "),a("li",[t._v("​"),a("code",[t._v("re.Match.span()")]),t._v("​: 返回一个元组，包含匹配子串在原字符串中的起始和结束位置。")])]),t._v(" "),a("p",[t._v("‍")])])}),[],!1,null,null,null);a.default=n.exports}}]);