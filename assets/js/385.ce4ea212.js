(window.webpackJsonp=window.webpackJsonp||[]).push([[385],{664:function(t,s,n){"use strict";n.r(s);var a=n(14),e=Object(a.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"序列协议"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#序列协议"}},[t._v("#")]),t._v(" 序列协议")]),t._v(" "),s("p",[t._v("‍")]),t._v(" "),s("h2",{attrs:{id:"序列协议-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#序列协议-2"}},[t._v("#")]),t._v(" 序列协议")]),t._v(" "),s("p",[t._v("在Python中，序列是指一种可以通过索引访问其中元素的数据类型，包括字符串、列表、元组等。序列协议定义了Python序列类型应该实现的一组标准接口，以便于在使用序列类型的过程中能够保持一致性和通用性。")]),t._v(" "),s("p",[t._v("Python序列协议要求序列类型实现以下特殊方法：")]),t._v(" "),s("ul",[s("li",[t._v("​"),s("code",[t._v("__len__(self)")]),t._v("​：返回序列中元素的数量。")]),t._v(" "),s("li",[t._v("​"),s("code",[t._v("__getitem__(self, index)")]),t._v("​：返回序列中指定位置的元素，其中"),s("code",[t._v("index")]),t._v("​是元素的索引值，从0开始计数，也可以使用负数索引从序列末尾开始反向索引。")]),t._v(" "),s("li",[t._v("​"),s("code",[t._v("__setitem__(self, index, value)")]),t._v("​：将序列中指定位置的元素设置为指定的值，其中"),s("code",[t._v("index")]),t._v("​是元素的索引值，从0开始计数。")]),t._v(" "),s("li",[t._v("​"),s("code",[t._v("__delitem__(self, index)")]),t._v("​：从序列中删除指定位置的元素，其中"),s("code",[t._v("index")]),t._v("​是元素的索引值，从0开始计数。")])]),t._v(" "),s("p",[t._v("此外，还有一些其他的方法可以使序列类型更加强大和灵活，例如：")]),t._v(" "),s("ul",[s("li",[t._v("​"),s("code",[t._v("__contains__(self, value)")]),t._v("​：检查序列中是否包含指定的值。")]),t._v(" "),s("li",[t._v("​"),s("code",[t._v("index(self, value)")]),t._v("​：返回序列中第一个与指定值匹配的元素的索引值。")]),t._v(" "),s("li",[t._v("​"),s("code",[t._v("count(self, value)")]),t._v("​：返回序列中指定值的出现次数。")])]),t._v(" "),s("p",[t._v("实现了序列协议的对象可以支持常见的序列操作，例如索引、切片、迭代、拼接等。这些操作可以使用通用的方式进行，无需关心序列类型的具体实现细节。")]),t._v(" "),s("p",[t._v("并且，通常并不需要实现所有方法，例如仅仅实现"),s("code",[t._v("__getitem__(self, index)")]),t._v("​也可以实现迭代和切片，其中的缘由可以认为是Python的虚拟机会做一些“智能化的”检查。")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MySeq")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("l "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("list")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__getitem__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("l"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__getitem__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nseq "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" MySeq"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" seq"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("end"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'-'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 0-1-2-3-4-5-6-7-8-9-")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\n'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("seq"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [0, 1, 2, 3, 4, 5, 6, 7, 8]")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);