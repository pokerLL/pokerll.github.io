(window.webpackJsonp=window.webpackJsonp||[]).push([[376],{655:function(t,s,n){"use strict";n.r(s);var a=n(14),e=Object(a.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"面向对象概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#面向对象概述"}},[t._v("#")]),t._v(" 面向对象概述")]),t._v(" "),s("p",[t._v("‍")]),t._v(" "),s("h2",{attrs:{id:"面向对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#面向对象"}},[t._v("#")]),t._v(" 面向对象")]),t._v(" "),s("p",[t._v("传统的命令式语言有无数重复性代码，虽然函数的诞生减缓了许多重复性，但随着计算机的发展，只有函数依然不够，需要把更加抽象的概念引入计算机才能缓解（而不是解决）这个问题，于是 OOP 应运而生。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("类：一群有着相似性的事物的集合，这里对应 Python 的 class。")]),t._v(" "),s("ul",[s("li",[t._v("python中所有数据类型都是对象，一个对象可以被多个变量所指向。")]),t._v(" "),s("li",[t._v("python中的一些数据类型，例如int，string是不可变的，在修改其值时实际上是创建了一个新的对象并让变量指向其。")]),t._v(" "),s("li",[t._v("对于不可变对象（字符串、整型、元组等等），所有指向该对象的变量的值总是一样的，也不会改变。但是通过某些操作（+= 等等）更新不可变对象的值时，会返回一个新的对象。")]),t._v(" "),s("li",[t._v("python中变量可以删除，但对象无法删除，只会被垃圾回收系统处理")])])]),t._v(" "),s("li",[s("p",[t._v("对象：集合中的一个事物，这里对应由 class 生成的某一个 object")])]),t._v(" "),s("li",[s("p",[t._v("属性：对象的某个静态特征")]),t._v(" "),s("ul",[s("li",[t._v("私有属性是以__（双下划线）开头的属性，举例：self.__属性名，只能在类内部调用，类外部无法访问。")]),t._v(" "),s("li",[t._v("和函数并列地声明并赋值便可以设置类的常量")])])]),t._v(" "),s("li",[s("p",[t._v("函数：对象的某个动态能力")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("静态函数")]),t._v(" "),s("ul",[s("li",[t._v("静态函数和类没有什么关联，第一个参数也没有什么特殊性；一般用来做一些简单独立的任务，既方便测试也能优化代码结构")]),t._v(" "),s("li",[t._v("需要在函数前一行加上@staticmethod 来表示")])])]),t._v(" "),s("li",[s("p",[t._v("类函数")]),t._v(" "),s("ul",[s("li",[t._v("类函数的第一个参数一般为cls，表示传递一个类进来")]),t._v(" "),s("li",[t._v("最常用的功能是实现不同的init构造")]),t._v(" "),s("li",[t._v("类函数需要装饰器 @classmethod 来声明")])])]),t._v(" "),s("li",[s("p",[t._v("成员函数")]),t._v(" "),s("ul",[s("li",[t._v("最正常的类的函数")]),t._v(" "),s("li",[t._v("不需要任何编译器什么")]),t._v(" "),s("li",[t._v("第一个参数self表示当前对象的引用")])])])])])]),t._v(" "),s("p",[t._v("‍")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Document")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  \n    WELCOME_STR "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Welcome! The context for this book is {}.'")]),t._v("\n  \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" title"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" author"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" context"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'init function called'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("title "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" title\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("author "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" author\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__context "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" context\n  \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 类函数")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[t._v("@classmethod")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("create_empty_book")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cls"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" title"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" author"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" cls"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("title"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("title"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" author"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("author"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" context"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'nothing'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 成员函数")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_context_length")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__context"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 静态函数")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[t._v("@staticmethod")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_welcome")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("context"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("WELCOME_STR"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("format")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("context"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\nempty_book "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("create_empty_book"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'What Every Man Thinks About Apart from Sex'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Professor Sheridan Simove'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("empty_book"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_context_length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("empty_book"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_welcome"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'indeed nothing'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("########## 输出 ##########")]),t._v("\n\ninit function called\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v("\nWelcome! The context "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" this book "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" indeed nothing"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\n")])])]),s("p",[t._v("‍")]),t._v(" "),s("h2",{attrs:{id:"鸭子类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#鸭子类型"}},[t._v("#")]),t._v(" 鸭子类型")]),t._v(" "),s("p",[t._v("鸭子类型是动态类型语言判断一个对象是不是某种类型时使用的方法，也叫做鸭子判定法。简单的说，鸭子类型是指判断一只鸟是不是鸭子，我们只关心它游泳像不像鸭子、叫起来像不像鸭子、走路像不像鸭子就足够了。换言之，如果对象的行为跟我们的预期是一致的（能够接受某些消息），我们就认定它是某种类型的对象。")]),t._v(" "),s("p",[t._v("在Python语言中，有很多bytes-like对象（如："),s("code",[t._v("bytes")]),t._v("​、"),s("code",[t._v("bytearray")]),t._v("​、"),s("code",[t._v("array.array")]),t._v("​、"),s("code",[t._v("memoryview")]),t._v("​）、file-like对象（如："),s("code",[t._v("StringIO")]),t._v("​、"),s("code",[t._v("BytesIO")]),t._v("​、"),s("code",[t._v("GzipFile")]),t._v("​、"),s("code",[t._v("socket")]),t._v("​）、path-like对象（如："),s("code",[t._v("str")]),t._v("​、"),s("code",[t._v("bytes")]),t._v("​），其中file-like对象都能支持"),s("code",[t._v("read")]),t._v("​和"),s("code",[t._v("write")]),t._v("​操作，可以像文件一样读写，这就是所谓的对象有鸭子的行为就可以判定为鸭子的判定方法。再比如Python中列表的"),s("code",[t._v("extend")]),t._v("​方法，它需要的参数并不一定要是列表，只要是可迭代对象就没有问题。")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("说明")]),t._v("：动态语言的鸭子类型使得设计模式的应用被大大简化。")])])])}),[],!1,null,null,null);s.default=e.exports}}]);