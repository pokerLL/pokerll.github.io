(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{311:function(t,s,a){"use strict";a.r(s);var n=a(14),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"关键源码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关键源码"}},[t._v("#")]),t._v(" 关键源码")]),t._v(" "),s("h2",{attrs:{id:"pycodeobject"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pycodeobject"}},[t._v("#")]),t._v(" PyCodeObject")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Bytecode object */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    PyObject_HEAD\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" co_argcount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* #arguments, except *args */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" co_kwonlyargcount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* #keyword only arguments */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" co_nlocals"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("             "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* #local variables */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" co_stacksize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("           "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* #entries needed for evaluation stack */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" co_flags"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("               "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* CO_..., see below */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" co_firstlineno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("         "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* first source line number */")]),t._v("\n    PyObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("co_code"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* instruction opcodes */")]),t._v("\n    PyObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("co_consts"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* list (constants used) */")]),t._v("\n    PyObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("co_names"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("         "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* list of strings (names used) */")]),t._v("\n    PyObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("co_varnames"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* tuple of strings (local variable names) */")]),t._v("\n    PyObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("co_freevars"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* tuple of strings (free variable names) */")]),t._v("\n    PyObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("co_cellvars"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* tuple of strings (cell variable names) */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* The rest aren't used in either hash or comparisons, except for co_name,\n       used in both. This is done to preserve the name and line number\n       for tracebacks and debuggers; otherwise, constant de-duplication\n       would collapse identical functions/lambdas defined on different lines.\n    */")]),t._v("\n    Py_ssize_t "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("co_cell2arg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Maps cell vars which are arguments. */")]),t._v("\n    PyObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("co_filename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* unicode (where it was loaded from) */")]),t._v("\n    PyObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("co_name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* unicode (name, for reference) */")]),t._v("\n    PyObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("co_lnotab"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* string (encoding addr<->lineno mapping) See\n                                   Objects/lnotab_notes.txt for details. */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("co_zombieframe"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* for optimization only (see frameobject.c) */")]),t._v("\n    PyObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("co_weakreflist"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* to support weakrefs to code objects */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Scratch space for extra data relating to the code object.\n       Type is a void* to keep the format private in codeobject.c to force\n       people to go through the proper APIs. */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("co_extra"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" PyCodeObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("‍")]),t._v(" "),s("h2",{attrs:{id:"pyframeobject"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pyframeobject"}},[t._v("#")]),t._v(" PyFrameObject")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("_frame")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    PyObject_VAR_HEAD\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("_frame")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("f_back"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* previous frame, or NULL */")]),t._v("\n    PyCodeObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("f_code"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* code segment */")]),t._v("\n    PyObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("f_builtins"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* builtin symbol table (PyDictObject) */")]),t._v("\n    PyObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("f_globals"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* global symbol table (PyDictObject) */")]),t._v("\n    PyObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("f_locals"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("         "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* local symbol table (any mapping) */")]),t._v("\n    PyObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("f_valuestack"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* points after the last local */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Next free slot in f_valuestack.  Frame creation sets to f_valuestack.\n       Frame evaluation usually NULLs it, but a frame that yields sets it\n       to the current stack top. */")]),t._v("\n    PyObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("f_stacktop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    PyObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("f_trace"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Trace function */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" f_trace_lines"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("         "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Emit per-line trace events? */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" f_trace_opcodes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Emit per-opcode trace events? */")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Borrowed reference to a generator, or NULL */")]),t._v("\n    PyObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("f_gen"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" f_lasti"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Last instruction if called */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Call PyFrame_GetLineNumber() instead of reading this field\n       directly.  As of 2.3 f_lineno is only valid when tracing is\n       active (i.e. when f_trace is set).  At other times we use\n       PyCode_Addr2Line to calculate the line from the current\n       bytecode index. */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" f_lineno"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("               "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Current line number */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" f_iblock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("               "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* index in f_blockstack */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" f_executing"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("           "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* whether the frame is still executing */")]),t._v("\n    PyTryBlock f_blockstack"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("CO_MAXBLOCKS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* for try and loop blocks */")]),t._v("\n    PyObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("f_localsplus"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* locals+stack, dynamically sized */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" PyFrameObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),s("p",[t._v("‍")]),t._v(" "),s("h2",{attrs:{id:"pyfunctionobject"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pyfunctionobject"}},[t._v("#")]),t._v(" PyFunctionObject")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    PyObject_HEAD\n    PyObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("func_code"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* A code object, the __code__ attribute */")]),t._v("\n    PyObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("func_globals"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 全局名字空间：A dictionary (other mappings won't do) */")]),t._v("\n    PyObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("func_defaults"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* NULL or a tuple */")]),t._v("\n    PyObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("func_kwdefaults"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* NULL or a dict */")]),t._v("\n    PyObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("func_closure"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* NULL or a tuple of cell objects */")]),t._v("\n    PyObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("func_doc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("         "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* The __doc__ attribute, can be anything */")]),t._v("\n    PyObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("func_name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* The __name__ attribute, a string object */")]),t._v("\n    PyObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("func_dict"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 局部名字空间：The __dict__ attribute, a dict or NULL */")]),t._v("\n    PyObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("func_weakreflist"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* List of weak references */")]),t._v("\n    PyObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("func_module"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* The __module__ attribute, can be anything */")]),t._v("\n    PyObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("func_annotations"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Annotations, a dict or NULL */")]),t._v("\n    PyObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("func_qualname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* The qualified name */")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Invariant:\n     *     func_closure contains the bindings for func_code->co_freevars, so\n     *     PyTuple_Size(func_closure) == PyCode_GetNumFree(func_code)\n     *     (func_closure may be NULL if PyCode_GetNumFree(func_code) == 0).\n     */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" PyFunctionObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("‍")]),t._v(" "),s("h2",{attrs:{id:"bytecode"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bytecode"}},[t._v("#")]),t._v(" ByteCode")]),t._v(" "),s("h3",{attrs:{id:"make-function"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#make-function"}},[t._v("#")]),t._v(" MAKE_FUNCTION")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("\t"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[t._v("Python"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("ceval"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c")])]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("TARGET")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("MAKE_FUNCTION"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            PyObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("qualname "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("POP")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从栈顶弹出关键参数-函数名、代码对象")]),t._v("\n            PyObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("codeobj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("POP")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            PyFunctionObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("func "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("PyFunctionObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建函数对象并继承帧对象的全局名字空间")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("PyFunction_NewWithQualName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("codeobj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" f"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("f_globals"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" qualname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Py_DECREF")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("codeobj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Py_DECREF")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("qualname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("func "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("goto")]),t._v(" error"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oparg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x08")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("assert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("PyTuple_CheckExact")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("TOP")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                func "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("func_closure "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("POP")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果是闭包函数，从栈顶取闭包变量")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oparg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x04")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("assert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("PyDict_CheckExact")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("TOP")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                func"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("func_annotations "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("POP")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果函数包含注释，从栈顶取注释")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oparg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x02")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("assert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("PyDict_CheckExact")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("TOP")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                func"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("func_kwdefaults "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("POP")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果函数参数有默认值，从栈顶取默认值")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oparg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x01")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("assert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("PyTuple_CheckExact")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("TOP")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                func"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("func_defaults "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("POP")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果函数参数有默认值，从栈顶取默认值")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("PUSH")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("PyObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("func"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("DISPATCH")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("‍")]),t._v(" "),s("h3",{attrs:{id:"call-function"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#call-function"}},[t._v("#")]),t._v(" CALL_FUNCTION")]),t._v(" "),s("p",[t._v("负责函数调用。")]),t._v(" "),s("p",[t._v("​"),s("code",[t._v("CALL_FUNCTION")]),t._v("​​ 是 Python 字节码指令之一，它的作用是调用函数。具体来说，"),s("code",[t._v("CALL_FUNCTION")]),t._v("​​ 从栈顶依次弹出 "),s("code",[t._v("n")]),t._v("​​ 个参数，然后从栈顶弹出一个函数对象，将这 "),s("code",[t._v("n")]),t._v("​​ 个参数传递给该函数并调用它。调用完成后，将函数返回值压入栈顶。")]),t._v(" "),s("p",[t._v("​"),s("code",[t._v("CALL_FUNCTION")]),t._v("​在"),s("code",[t._v("Python/ceval.c")]),t._v("​ 中处理，它主要是调用 "),s("code",[t._v("call_function")]),t._v("​函数完成工作。"),s("code",[t._v("call_function")]),t._v("​函数根据被调用对象类型区别处理，可分为 "),s("strong",[t._v("类方法")]),t._v(" 、 "),s("strong",[t._v("函数对象")]),t._v(" ， "),s("strong",[t._v("普通可调用对象")]),t._v(" 等等。")]),t._v(" "),s("p",[t._v("如果被调用对象是函数对象，则调用位于 "),s("code",[t._v("Objects/call.c")]),t._v("​ 中的 "),s("code",[t._v("_PyFunction_FastCallKeywords")]),t._v("​ 函数，而它则进一步调用位于 "),s("code",[t._v("Python/ceval.c")]),t._v("​ 的 "),s("code",[t._v("_PyEval_EvalCodeWithName")]),t._v("​函数。")]),t._v(" "),s("p",[t._v("​"),s("code",[t._v("_PyEval_EvalCodeWithName")]),t._v("​函数先为目标函数 "),s("code",[t._v("co_process")]),t._v("​创建 "),s("strong",[t._v("栈帧")]),t._v(" 对象 f，然后检查代码对象标识。若代码对象带有 "),s("code",[t._v("CO_GENERATOR")]),t._v("​、"),s("code",[t._v("CO_COROUTINE")]),t._v("​或 "),s("code",[t._v("CO_ASYNC_GENERATOR")]),t._v("​标识，便创建生成器并返回。")]),t._v(" "),s("p",[t._v("‍")]),t._v(" "),s("p",[t._v("以下是一些 "),s("code",[t._v("CALL_FUNCTION")]),t._v("​ 指令的使用示例：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("调用无参数函数：")]),t._v(" "),s("p",[t._v("在这个示例中，"),s("code",[t._v("CALL_FUNCTION 0")]),t._v("​ 指令将调用 "),s("code",[t._v("my_func")]),t._v("​ 函数，并且不传递任何参数。")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("my_func")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello, world!"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nCALL_FUNCTION "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("调用有参数函数：")]),t._v(" "),s("p",[t._v("在这个示例中，"),s("code",[t._v("CALL_FUNCTION 2")]),t._v("​ 指令将调用 "),s("code",[t._v("add")]),t._v("​ 函数，并传递两个参数。先通过 "),s("code",[t._v("LOAD_CONST")]),t._v("​ 指令将常量 "),s("code",[t._v("1")]),t._v("​ 和 "),s("code",[t._v("2")]),t._v("​ 压入栈顶，然后执行 "),s("code",[t._v("CALL_FUNCTION 2")]),t._v("​ 指令调用 "),s("code",[t._v("add")]),t._v("​ 函数，并将栈顶的两个元素作为参数传递给该函数。")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b\n\nLOAD_CONST "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 压入常量 1")]),t._v("\nLOAD_CONST "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 压入常量 2")]),t._v("\nCALL_FUNCTION "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("调用方法：")]),t._v(" "),s("p",[t._v("在这个示例中，"),s("code",[t._v("CALL_FUNCTION 1")]),t._v("​ 指令将调用 "),s("code",[t._v("append")]),t._v("​ 方法，并传递一个参数。首先通过 "),s("code",[t._v("LOAD_NAME")]),t._v("​ 指令将变量 "),s("code",[t._v("my_list")]),t._v("​ 压入栈顶，然后通过 "),s("code",[t._v("LOAD_ATTR")]),t._v("​ 指令获取其 "),s("code",[t._v("append")]),t._v("​ 属性，并将该方法对象压入栈顶。接着通过 "),s("code",[t._v("LOAD_CONST")]),t._v("​ 指令将常量 "),s("code",[t._v("4")]),t._v("​ 压入栈顶，最后执行 "),s("code",[t._v("CALL_FUNCTION 1")]),t._v("​ 指令调用 "),s("code",[t._v("append")]),t._v("​ 方法，并将栈顶的一个元素作为参数传递给该方法。")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("my_list "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nmy_list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nLOAD_NAME "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# 压入名字 "my_list"')]),t._v("\nLOAD_ATTR "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# 获取 my_list 的 "append" 属性')]),t._v("\nLOAD_CONST "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 压入常量 4")]),t._v("\nCALL_FUNCTION "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n")])])])])]),t._v(" "),s("h4",{attrs:{id:"load-const"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#load-const"}},[t._v("#")]),t._v(" LOAD_CONST")]),t._v(" "),s("p",[t._v("在Python字节码中，"),s("code",[t._v("LOAD_CONST")]),t._v("​ 操作码的作用是将一个常量压入操作数栈中，常量的值存在常量表中，常量可以是数字、字符串、元组等不可变的对象。")]),t._v(" "),s("p",[t._v("​"),s("code",[t._v("LOAD_CONST")]),t._v("​ 操作码的入参是常量在常量表中的索引。当Python解释器执行到 "),s("code",[t._v("LOAD_CONST")]),t._v("​ 时，会根据给定的索引获取常量值，并将该值推入操作数栈中。")]),t._v(" "),s("p",[t._v("例如，假设有以下代码：")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("def "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("example")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),t._v("\n")])])]),s("p",[t._v("该代码的字节码可以通过 "),s("code",[t._v("dis")]),t._v("​ 模块来查看：")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token module"}},[t._v("dis")]),t._v("\n\ndef "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("example")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),t._v("\n\ndis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dis")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("输出结果为：")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("           "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" LOAD_CONST               "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n              "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" RETURN_VALUE\n")])])]),s("p",[t._v("可以看到，在字节码的第一行（索引为0）中，"),s("code",[t._v("LOAD_CONST")]),t._v("​ 操作码将常量表中索引为1的常量值 "),s("code",[t._v("42")]),t._v("​ 推入操作数栈中。")]),t._v(" "),s("p",[t._v("因此，当函数 "),s("code",[t._v("example")]),t._v("​ 被调用时，解释器会执行字节码中的 "),s("code",[t._v("LOAD_CONST")]),t._v("​ 操作码，将常量值 "),s("code",[t._v("42")]),t._v("​ 压入操作数栈中，然后执行 "),s("code",[t._v("RETURN_VALUE")]),t._v("​ 操作码将结果返回。")]),t._v(" "),s("p",[t._v("‍")]),t._v(" "),s("h3",{attrs:{id:"load-fast"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#load-fast"}},[t._v("#")]),t._v(" LOAD_FAST")]),t._v(" "),s("p",[t._v("由于函数有多少局部变量是固定的，代码编译时就能确定。因此，没有必要用字典来实现局部名字空间，只需把局部变量依次编号，保存在栈底即可。这样一来，通过编号即可快速存取局部变量，效率比字典更高。于此对应，有一个特殊的字节码 LOAD_FAST 用于加载局部变量，以操作数的编号为操作数。")]),t._v(" "),s("p",[t._v("​"),s("img",{attrs:{src:"https://assets.b3logfile.com/siyuan/xxxxxx/assets/5f0e624e0001554316971051-20230219042949-kbcg006.png",alt:"图片描述"}}),t._v("​")]),t._v(" "),s("p",[t._v("LOAD_FAST 是 Python 字节码指令之一，用于从当前函数的本地命名空间中加载变量的值。具体而言：")]),t._v(" "),s("ol",[s("li",[t._v("LOAD_FAST 的操作数是一个变量名，在字节码指令中作为索引来查找变量名在本地命名空间中对应的值。")]),t._v(" "),s("li",[t._v("如果变量名不存在，则会引发 NameError 异常。")]),t._v(" "),s("li",[t._v("LOAD_FAST 操作指令将值加载到运行时数据栈的栈顶。")]),t._v(" "),s("li",[t._v("在函数的本地命名空间中查找变量名的过程是基于 LIFO 的栈帧结构实现的，即最后定义的变量名在栈顶。")]),t._v(" "),s("li",[t._v("LOAD_FAST 指令的效率较高，因为它可以通过直接从栈帧对象的局部变量表中加载变量值而无需进行额外的查找或解析操作。")])]),t._v(" "),s("p",[t._v("‍")]),t._v(" "),s("h3",{attrs:{id:"store-fast"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#store-fast"}},[t._v("#")]),t._v(" STORE_FAST")]),t._v(" "),s("p",[t._v("​"),s("code",[t._v("STORE_FAST")]),t._v("​ 是Python虚拟机的一条字节码指令，用于将数据存储到局部变量中。")]),t._v(" "),s("p",[t._v("​"),s("code",[t._v("STORE_FAST")]),t._v("​ 的入参是一个整数，代表局部变量在当前函数的局部命名空间中的位置。这个整数由编译器在编译时确定，一般是根据该变量在源代码中出现的位置以及该函数中的其他变量数量来计算得出。它指示了该变量在栈帧对象的 "),s("code",[t._v("f_locals")]),t._v("​ 字典中的位置。")]),t._v(" "),s("p",[t._v("​"),s("code",[t._v("STORE_FAST")]),t._v("​ 的行为是将栈顶的数值弹出，并存储到局部变量中。因此，对于 "),s("code",[t._v("STORE_FAST")]),t._v("​ 指令来说，栈顶的值就是要存储到局部变量中的值。它使用被弹出的值来更新 "),s("code",[t._v("f_locals")]),t._v("​ 字典中对应的局部变量。")]),t._v(" "),s("p",[t._v("以下是一个使用 "),s("code",[t._v("STORE_FAST")]),t._v("​ 指令的示例代码：")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("def "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("example_function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n    z "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" y\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" z\n")])])]),s("p",[t._v("在上面的示例代码中，变量 "),s("code",[t._v("x")]),t._v("​ 在栈的位置是 0，"),s("code",[t._v("y")]),t._v("​ 在位置 1，"),s("code",[t._v("z")]),t._v("​ 在位置 2。因此，当虚拟机执行到 "),s("code",[t._v("y = 2")]),t._v("​ 这行代码时，它会将常量 2 压入栈中，然后执行 "),s("code",[t._v("STORE_FAST 1")]),t._v("​ 操作，将栈顶的值 2 存储到位置 1 对应的局部变量中。")]),t._v(" "),s("p",[t._v("类似地，当执行到 "),s("code",[t._v("z = x + y")]),t._v("​ 这行代码时，虚拟机会将变量 "),s("code",[t._v("x")]),t._v("​ 和 "),s("code",[t._v("y")]),t._v("​ 分别从位置 0 和位置 1 取出，并执行相应的计算，将结果压入栈顶。然后执行 "),s("code",[t._v("STORE_FAST 2")]),t._v("​ 操作，将栈顶的值存储到位置 2 对应的局部变量中。")]),t._v(" "),s("p",[t._v("最后，当虚拟机执行到 "),s("code",[t._v("return z")]),t._v("​ 这行代码时，它会将变量 "),s("code",[t._v("z")]),t._v("​ 从位置 2 取出，并将其作为函数的返回值。")]),t._v(" "),s("p",[t._v("‍")]),t._v(" "),s("h3",{attrs:{id:"load-deref"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#load-deref"}},[t._v("#")]),t._v(" LOAD_DEREF")]),t._v(" "),s("p",[t._v("PyFrameObject 结构体最后部分是不固定的，依次存放着静态局部名字空间、闭包名字空间以及临时栈。")]),t._v(" "),s("p",[t._v("由于函数局部变量、闭包变量个数在编译阶段就能确定，运行时并不会增减，因此无须用 "),s("em",[t._v("dict")]),t._v(" 对象来保存。相反，将这些变量依次排列保存在数组中，然后通过数组下标来访问即可。这就是所谓的静态名字空间。")]),t._v(" "),s("p",[t._v("对于局部变量 n ，数组对应的槽位保存着整数对象 1 的地址，表示 n 与 1 绑定。而闭包变量 x 则略有差别，槽位不直接保存整数对象 10 ，而是通过一个 PyCellObject 间接与整数对象 10 绑定。")]),t._v(" "),s("blockquote",[s("p",[t._v("这么做是为了保证nonloacl的修改能生效而不是出去就没了。")])]),t._v(" "),s("p",[t._v("函数对象 "),s("em",[t._v("PyFunctionObject")]),t._v(" 中有一个字段 "),s("em",[t._v("func_closure")]),t._v(" ，保存着函数所有闭包变量。我们可以通过名字  "),s("em",[s("strong",[t._v("closure")])]),t._v("  可以访问到这个底层结构体字段：")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" add10"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__closure__\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("cell at "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x10dc09e28")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("object")]),t._v(" at "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x10da161a0")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("这是一个由 PyCellObject 组成的元组，PyCellObject 则保存着闭包变量的值。当函数调用发生时，Python 虚拟机创建 PyFrameObject 对象，并从函数对象取出该元组，依次填充相关静态槽位。")]),t._v(" "),s("p",[t._v("​"),s("img",{attrs:{src:"https://assets.b3logfile.com/siyuan/xxxxxx/assets/net-img-5f14fba700010b7e09800213-20231217204328-m0xilqr.png",alt:"图片描述"}}),t._v("​")]),t._v(" "),s("p",[t._v("通过 cell_contents 属性可以访问闭包变量值：")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" add10"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__closure__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("cell at "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x10dc09e28")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("object")]),t._v(" at "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x10da161a0")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" add10"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__closure__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cell_contents\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);