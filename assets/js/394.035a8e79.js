(window.webpackJsonp=window.webpackJsonp||[]).push([[394],{672:function(t,s,a){"use strict";a.r(s);var _=a(14),e=Object(_.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"描述器协议概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#描述器协议概述"}},[t._v("#")]),t._v(" 描述器协议概述")]),t._v(" "),s("h2",{attrs:{id:"定义和简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#定义和简介"}},[t._v("#")]),t._v(" 定义和简介")]),t._v(" "),s("p",[t._v("一个描述器是一个包含 “绑定行为” 的对象，对其属性的访问被描述器协议中定义的方法覆盖。这些方法有："),s("code",[t._v("__get__()")]),t._v("​，"),s("code",[t._v("__set__()")]),t._v("​和 "),s("code",[t._v("__delete__()")]),t._v("​。如果某个对象中定义了这些方法中的任意一个，那么这个对象就可以被称为一个描述器。")]),t._v(" "),s("p",[t._v("属性访问的默认行为是从一个对象的字典中获取、设置或删除属性。例如，a.x 的查找顺序会从 "),s("code",[t._v("a.__dict__['x']")]),t._v("​ 开始，然后是 "),s("code",[t._v("type(a).__dict__['x']")]),t._v("​，接下来依次查找"),s("code",[t._v("type(a)")]),t._v("​ 的基类，不包括元类。 如果找到的值是定义了某个描述器方法的对象，则 Python 可能会重载默认行为并转而发起调用描述器方法。这具体发生在优先级链的哪个环节则要根据所定义的描述器方法及其被调用的方式来决定。")]),t._v(" "),s("p",[t._v("描述器是一个强大而通用的协议。 它们是特征属性、方法静态方法、类方法和 super() 背后的实现机制。 在 Python 内部被广泛使用来实现自 2.2 版中引入的新式类。 描述器简化了底层的 C 代码并为 Python 的日常程序提供了一组灵活的新工具。")]),t._v(" "),s("p",[t._v("‍")]),t._v(" "),s("h2",{attrs:{id:"描述器分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#描述器分类"}},[t._v("#")]),t._v(" 描述器分类")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("descr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__get__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("type")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" value\ndescr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__set__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),t._v("\ndescr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__delete__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),t._v("\n")])])]),s("p",[t._v("‍")]),t._v(" "),s("p",[t._v("数据描述符、强制描述符：同时实现"),s("code",[t._v("__get__()")]),t._v("​ 和 "),s("code",[t._v("__set__()")]),t._v("​")]),t._v(" "),s("p",[t._v("非数据描述符、遮盖型描述符：仅定义 "),s("code",[t._v("__get__()")]),t._v("​​")]),t._v(" "),s("p",[t._v("‍")]),t._v(" "),s("p",[t._v("覆盖型描述符：实现了 "),s("code",[t._v("__set__()")]),t._v("​")]),t._v(" "),s("p",[t._v("非覆盖描述符：没有实现"),s("code",[t._v("__set__()")]),t._v("​")]),t._v(" "),s("p",[t._v("‍")]),t._v(" "),s("h2",{attrs:{id:"发起调用描述器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#发起调用描述器"}},[t._v("#")]),t._v(" 发起调用描述器")]),t._v(" "),s("p",[t._v("描述符可以通过其方法名称直接调用。例如， "),s("code",[t._v("d.__get__(obj)")]),t._v("​ 。")]),t._v(" "),s("p",[t._v("更常见的是在属性访问时自动调用描述符。例如，在中 obj.d 会在 d 的字典中查找 obj 。如果 d 定义了方法 "),s("code",[t._v("__get__()")]),t._v("​​，则 "),s("code",[t._v("d.__get__(obj)")]),t._v("​​ 根据下面列出的优先级规则进行调用。")]),t._v(" "),s("p",[t._v("调用的细节取决于 obj 是对象还是类。")]),t._v(" "),s("p",[t._v("对于对象来说， "),s("code",[t._v("object.__getattribute__()")]),t._v("​​ 中的机制是将 b.x 转换为 "),s("code",[t._v("type(b).__dict__['x'].__get__(b, type(b))")]),t._v("​​。")]),t._v(" "),s("p",[t._v("这个实现通过一个优先级链完成，该优先级链赋予数据描述器优先于实例变量的优先级，实例变量优先于非数据描述符的优先级，并如果 "),s("code",[t._v("__getattr__()")]),t._v("​​ 方法存在，为其分配最低的优先级。 完整的C实现可在 "),s("code",[t._v("Objects/object.c")]),t._v("​​ 中的 "),s("code",[t._v("PyObject_GenericGetAttr()")]),t._v("​​找到。")]),t._v(" "),s("p",[t._v("对于类来说，机制是 "),s("code",[t._v("type.__getattribute__()")]),t._v("​ 中将 B.x 转换为 "),s("code",[t._v("B.__dict__['x'].__get__(None, B)")]),t._v("​ 。在纯Python中，它就像:")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__getattribute__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Emulate type_getattro() in Objects/typeobject.c"')]),t._v("\n    v "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__getattribute__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("hasattr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'__get__'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__get__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" v\n")])])]),s("p",[t._v("要记住的重要点是：")]),t._v(" "),s("ul",[s("li",[t._v("描述器由 "),s("code",[t._v("__getattribute__()")]),t._v("​ 方法调用")]),t._v(" "),s("li",[t._v("重写 "),s("code",[t._v("__getattribute__()")]),t._v("​ 会阻止描述器的自动调用")]),t._v(" "),s("li",[t._v("​"),s("code",[t._v("object.__getattribute__()")]),t._v("​ 和 "),s("code",[t._v("type.__getattribute__()")]),t._v("​ 会用不同的方式调用 "),s("code",[t._v("__get__()")]),t._v("​.")]),t._v(" "),s("li",[t._v("数据描述符始终会覆盖实例字典。")]),t._v(" "),s("li",[t._v("非数据描述器会被实例字典覆盖。")])]),t._v(" "),s("p",[t._v("super() 返回的对象还有一个自定义的 "),s("code",[t._v("__getattribute__()")]),t._v("​ ** ** 方法用来发起调用描述器。 调用 "),s("code",[t._v("super(B, obj).m()")]),t._v("​ 会搜索 "),s("code",[t._v("obj.__class__.__mro__")]),t._v("​ 紧随 B 的基类 A，然后返回 "),s("code",[t._v("A.__dict__['m'].__get__(obj, B)")]),t._v("​。 如果其不是描述器，则原样返回 m。 如果不在字典中，m 会转而使用 "),s("code",[t._v("object.__getattribute__()")]),t._v("​ 进行搜索。")]),t._v(" "),s("p",[t._v("这个实现的具体细节在 "),s("code",[t._v("Objects/typeobject.c.")]),t._v("​ 的 "),s("code",[t._v("super_getattro()")]),t._v("​中，并且你还可以在 Guido's Tutorial 中找到等价的纯Python实现。")]),t._v(" "),s("p",[t._v("以上展示的关于描述器机制的细节嵌入在 object ， type ， 和 super() 中的 "),s("strong",[t._v("getattribute")]),t._v("() 。当类派生自类 object 或有提供类似功能的元类时，它们将继承此机制。同样，类可以通过重写 "),s("strong",[t._v("getattribute")]),t._v("() 阻止描述器调用。")]),t._v(" "),s("p",[t._v("‍")]),t._v(" "),s("h2",{attrs:{id:"描述符示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#描述符示例"}},[t._v("#")]),t._v(" 描述符示例")]),t._v(" "),s("p",[t._v("以下代码创建一个类，其对象是数据描述器，该描述器为每个 get 或 set 打印一条消息。覆盖 "),s("strong",[t._v("getattribute")]),t._v("() 是可以对每个属性执行此操作的替代方法。但是，此描述器对于跟踪仅几个选定的属性很有用：")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RevealAccess")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""A data descriptor that sets and returns values\n       normally and prints a message logging their access.\n    """')]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" initval"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'var'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" initval\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__get__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" objtype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Retrieving'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__set__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Updating'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" val\n\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("     x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" RevealAccess"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'var \"x\"'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("     y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" m "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" MyClass"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x\nRetrieving var "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"x"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v("\nUpdating var "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"x"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x\nRetrieving var "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"x"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("y\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n")])])]),s("p",[t._v("‍")]),t._v(" "),s("h2",{attrs:{id:"访问顺序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#访问顺序"}},[t._v("#")]),t._v(" 访问顺序")]),t._v(" "),s("h3",{attrs:{id:"get"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#get"}},[t._v("#")]),t._v(" get")]),t._v(" "),s("p",[t._v("_PyObject_GenericGetAttrWithDict")]),t._v(" "),s("p",[t._v("Python 将照以下优先级逐一确定：")]),t._v(" "),s("ol",[s("li",[s("p",[s("strong",[t._v("数据描述符")]),t._v("：如果类型对象 (含父类) 定义了同名数据描述符属性，属性操作将被其接管；")]),t._v(" "),s("blockquote",[s("p",[t._v("实现了__set__ 和 "),s("strong",[t._v("get")])])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("对象属性")]),t._v("：除了①，属性操作默认在属性空间中完成；")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("非数据描述符")]),t._v("：属性访问时，如果①②均不成功，而类型对象 (含父类) 定义了同名非数据描述符，属性访问将被其接管；")]),t._v(" "),s("blockquote",[s("p",[t._v("仅实现__get__")])])])]),t._v(" "),s("p",[t._v("即数据描述符优先级最高，对象属性空间次之，非数据描述符最低。")]),t._v(" "),s("p",[t._v("举例：")]),t._v(" "),s("p",[t._v("​"),s("img",{attrs:{src:"https://assets.b3logfile.com/siyuan/xxxxxx/assets/image-20230219154409-bdg03qo.png",alt:"image"}}),t._v("​")]),t._v(" "),s("ul",[s("li",[t._v("对于属性 a ，由于类型对象 t 属性空间定义了数据描述符，将屏蔽实例对象 o 属性空间中的定义；")]),t._v(" "),s("li",[t._v("对于属性 b ，由于类型对象 t 属性空间定义的只是非数据描述符，仍以实例对象 o 属性空间定义的为准；")]),t._v(" "),s("li",[t._v("对于属性 c ，由于实例对象 o 属性空间未定义，属性访问将以类型对象 t 属性空间定义的非数据描述符为准；")]),t._v(" "),s("li",[t._v("对于属性 c ，由于类型对象 t 属性空间定义的只是非数据描述符，属性设置、删除仍以实例对象 o 属性空间为准；")])]),t._v(" "),s("p",[t._v("‍")]),t._v(" "),s("h3",{attrs:{id:"set"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[t._v("#")]),t._v(" set")]),t._v(" "),s("p",[t._v("_PyObject_GenericSetAttrWithDict")]),t._v(" "),s("ol",[s("li",[t._v("类型中实现了"),s("code",[t._v("__set__()")]),t._v("​方法的描述符则交由"),s("code",[t._v("__set()__")]),t._v("​")]),t._v(" "),s("li",[t._v("直接在实例属性字典中设置")])])])}),[],!1,null,null,null);s.default=e.exports}}]);