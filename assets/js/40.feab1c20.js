(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{321:function(t,s,a){"use strict";a.r(s);var n=a(14),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"dict"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dict"}},[t._v("#")]),t._v(" dict")]),t._v(" "),s("h2",{attrs:{id:"内部结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内部结构"}},[t._v("#")]),t._v(" 内部结构")]),t._v(" "),s("h3",{attrs:{id:"概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("Python 虚拟机的运行重度依赖 "),s("code",[t._v("dict")]),t._v("​对象，包括 "),s("strong",[t._v("名字空间")]),t._v(" 以及 "),s("strong",[t._v("对象属性空间")]),t._v(" 等概念底层都是由 dict 对象实现的。因此， Python 对 dict 对象的效率要求极为苛刻。")])]),t._v(" "),s("li",[s("p",[t._v("​"),s("code",[t._v("dict")]),t._v("​最小长度为8并且"),s("code",[t._v("dict")]),t._v("​拓展时是直接长度乘2，因此哈希表的大小永远是 2 的幂次方。也因此，对于任何一个键的哈希值，只需要使用哈希表的长度对其取模即可得到该键在哈希表中的索引位置。")])]),t._v(" "),s("li",[s("p",[t._v("​"),s("code",[t._v("dict")]),t._v("​对象真正的实现在"),s("code",[t._v("PyDictKeysObject")]),t._v("​中，其内部维护两个关键数组，一个是键值对数组"),s("code",[t._v("dk_entries")]),t._v("​，一个是哈希索引数组"),s("code",[t._v("dk_indices")]),t._v("​。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("dict所维护的键值对，按照先来后到的顺序保存于键值对数组中，而哈希索引数组对应槽位保存着键值对在数组中的位置。")])]),t._v(" "),s("li",[s("p",[t._v("因此当我们向空dict对象插入新键值对"),s("code",[t._v("('jim',70)")]),t._v("​时，Python会执行以下步骤：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("将键值对保存于 "),s("code",[t._v("dk_entries")]),t._v("​数组末尾，即下标为 0 的位置；")])]),t._v(" "),s("li",[s("p",[t._v("计算键对象 "),s("code",[t._v("‘jim’")]),t._v("​ 的哈希值并取右 "),s("code",[t._v("3")]),t._v("​ 位，得到该键在哈希索引数组中的下标 5 ；")]),t._v(" "),s("blockquote",[s("p",[t._v("默认长度为8")])])]),t._v(" "),s("li",[s("p",[t._v("将键值对在数组中的下标 0 ，保存于哈希索引数组中编号为 5 的槽位中。")])])])]),t._v(" "),s("li",[s("p",[t._v("查找操作步骤为：")]),t._v(" "),s("ol",[s("li",[t._v("计算键对象 "),s("code",[t._v("‘jim’")]),t._v("​ 的哈希值并取右"),s("code",[t._v("3")]),t._v("​位，得到该键在哈希索引数组中的下标 5 ；")]),t._v(" "),s("li",[t._v("找到哈希索引数组下标为 5 的槽位，取出其中保存的下标 0 ；")]),t._v(" "),s("li",[t._v("找到键值对数组第 0 个位置，并取出 "),s("strong",[t._v("值对象")]),t._v(" ；")])])]),t._v(" "),s("li",[s("p",[t._v("‍")])])])])]),t._v(" "),s("p",[t._v("​"),s("img",{attrs:{src:"https://assets.b3logfile.com/siyuan/xxxxxx/assets/image-20230212022116-x6r9si5.png",alt:"image"}})]),t._v(" "),s("p",[t._v("‍")]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("h3",{attrs:{id:"pydictobject"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pydictobject"}},[t._v("#")]),t._v(" PyDictObject")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    PyObject_HEAD\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Number of items in the dictionary */")]),t._v("\n    Py_ssize_t ma_used"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对象当前所保存的键值对个数")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Dictionary version: globally unique, value change each time\n       the dictionary is modified */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("uint64_t")]),t._v(" ma_version_tag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对象当前版本号，每次修改时更新")]),t._v("\n\n    PyDictKeysObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ma_keys"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指向键对象映射的哈希表结构")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/* If ma_values is NULL, the table is "combined": keys and values\n       are stored in ma_keys.\n\n       If ma_values is not NULL, the table is splitted:\n       keys are stored in ma_keys and values are stored in ma_values */')]),t._v("\n    PyObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ma_values"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 分离模式下指向由所有值对象组成的数组")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" PyDictObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"pydictkeysobject"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pydictkeysobject"}},[t._v("#")]),t._v(" PyDictKeysObject")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("_dictkeysobject")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Py_ssize_t dk_refcnt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//引用计数，与映射视图的实现有关")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Size of the hash table (dk_indices). It must be a power of 2. */")]),t._v("\n    Py_ssize_t dk_size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 哈希表大小，必须是2^n-可以将模运算优化为按位与运算")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Function to lookup in the hash table (dk_indices):\n\n       - lookdict(): general-purpose, and may return DKIX_ERROR if (and\n         only if) a comparison raises an exception.\n\n       - lookdict_unicode(): specialized to Unicode string keys, comparison of\n         which can never raise an exception; that function can never return\n         DKIX_ERROR.\n\n       - lookdict_unicode_nodummy(): similar to lookdict_unicode() but further\n         specialized for Unicode string keys that cannot be the <dummy> value.\n\n       - lookdict_split(): Version of lookdict() for split tables. */")]),t._v("\n    dict_lookup_func dk_lookup"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 哈希查找函数指针 根据dict当前状态选用最优函数版本")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Number of usable entries in dk_entries. */")]),t._v("\n    Py_ssize_t dk_usable"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 键值对数组可用个数")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Number of used entries in dk_entries. */")]),t._v("\n    Py_ssize_t dk_nentries"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 键值对数组已用个数")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Actual hash table of dk_size entries. It holds indices in dk_entries,\n       or DKIX_EMPTY(-1) or DKIX_DUMMY(-2).\n\n       Indices must be: 0 <= indice < USABLE_FRACTION(dk_size).\n\n       The size in bytes of an indice depends on dk_size:\n\n       - 1 byte if dk_size <= 0xff (char*)\n       - 2 bytes if dk_size <= 0xffff (int16_t*)\n       - 4 bytes if dk_size <= 0xffffffff (int32_t*)\n       - 8 bytes otherwise (int64_t*)\n\n       Dynamically sized, SIZEOF_VOID_P is minimum. */")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 哈希表起始地址")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" dk_indices"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* char is required to avoid strict aliasing. */")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 后面紧跟着键值对数组 dk_entries")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/* "PyDictKeyEntry dk_entries[dk_usable];" array follows:\n       see the DK_ENTRIES() macro */')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("‍")]),t._v(" "),s("h3",{attrs:{id:"pydictkeyentry"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pydictkeyentry"}},[t._v("#")]),t._v(" PyDictKeyEntry")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Cached hash code of me_key. */")]),t._v("\n    Py_hash_t me_hash"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 键的hash值，避免重复计算")]),t._v("\n    PyObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("me_key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 键对象指针")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* This field is only meaningful for combined tables */")]),t._v("\n    PyObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("me_value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 值对象指针")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" PyDictKeyEntry"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("‍")]),t._v(" "),s("h2",{attrs:{id:"dict行为"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dict行为"}},[t._v("#")]),t._v(" dict行为")]),t._v(" "),s("h3",{attrs:{id:"预分配机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#预分配机制"}},[t._v("#")]),t._v(" 预分配机制")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("dict内部哈希表最小长度为8，因此向空dict插入元素实际上并不会使得dict占用的内存空间变大。")])]),t._v(" "),s("li",[s("p",[t._v("哈希表必须是一种稀疏的表结构，根据实践经验，一个 "),s("code",[t._v("1/2")]),t._v("​到 "),s("code",[t._v("2/3")]),t._v("​ 满的哈希表，性能较为理想，较好地平衡了 "),s("strong",[t._v("内存开销")]),t._v(" 与 "),s("strong",[t._v("搜索效率")]),t._v(" ；因此Python通过"),s("code",[t._v("USABLE_FRACTION")]),t._v("​宏将哈希表内元素控制在 "),s("code",[t._v("2/3")]),t._v("​ 以内。以长度为 8 的哈希表为例，最多可以保持 5 个键值对，超出则需要扩容。")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name function"}},[t._v("USABLE_FRACTION")]),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("哈希表规模一定是2^n，即Python对于dict采用翻倍扩容的策略。")])]),t._v(" "),s("li",[s("p",[t._v("对于一个空dict占用的内存空间分析：")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" sys"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getsizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("240")]),t._v("\n")])])]),s("ol",[s("li",[t._v("可收集对象链表节点，共 24 字节；")]),t._v(" "),s("li",[t._v("PyDictObject 结构体，6 个字段，共 48 字节；")]),t._v(" "),s("li",[t._v("PyDictKeysObject 结构体，除两个数组外有 5 个字段，共 40 字节；")]),t._v(" "),s("li",[t._v("哈希索引数组，长度为 8 ，每个槽位 1 字节，共 8 字节；")]),t._v(" "),s("li",[t._v("键值对数组，长度为 5 ，每个 PyDictKeyEntry 结构体 24 字节，共 120 字节。")])])])]),t._v(" "),s("p",[t._v("‍")]),t._v(" "),s("h3",{attrs:{id:"哈希值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#哈希值"}},[t._v("#")]),t._v(" 哈希值")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("Python内置函数hash返回对象哈希值，哈希表依赖哈希值索引元素。")]),t._v(" "),s("blockquote",[s("p",[t._v("可hash对象")]),t._v(" "),s("p",[t._v("根据哈希表性质，键对象必须满足如下两个条件：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("第一点：哈希值在对象整个声明周期内不可改变")])]),t._v(" "),s("li",[s("p",[t._v("第二点：可比较、比较相等的对象哈希值必须相同。")])]),t._v(" "),s("li",[s("p",[t._v("因此内建对象中的不可变对象都是可哈希对象（tuple可哈希），而list、dict等可变对象则不可哈希。")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" dic "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tuple"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dic"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'tuple'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("用户自定义对象默认时是哈希对象-哈希值由对象地址计算而来。可以覆写"),s("code",[t._v("__hash__")]),t._v("​魔术方法来实现自定义的哈希值计算，这个方法存储在类型对象的tp_hash函数指针中。")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("PyTypeObject PyUnicode_Type "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("PyVarObject_HEAD_INIT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("PyType_Type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"str"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("              "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* tp_name */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("PyUnicodeObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* tp_size */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hashfunc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" unicode_hash"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* tp_hash*/")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n    unicode_new"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* tp_new */")]),t._v("\n    PyObject_Del"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("           "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* tp_free */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])])])]),t._v(" "),s("li",[s("p",[t._v("哈希值使用频率较高，并且在对象生命周期内保持不变，因此可以在对象内部对哈希值进行缓存，避免重复计算-例如str对象的"),s("code",[t._v("hash")]),t._v("​​字段。")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" ASCII"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("only strings created through PyUnicode_New use the PyASCIIObject\n   structure"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("ascii")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("compact are "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" the data\n   immediately follow the structure"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" utf8_length "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" wstr_length can be found\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" the length field"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" the utf8 pointer "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" equal to the data pointer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("\ntypedef struct "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    PyObject_HEAD\n    Py_ssize_t length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("          "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" Number of code points "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" the string "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("\n    Py_hash_t "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("hash")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("             "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" Hash value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("set")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("\n    struct "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        unsigned "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" interned"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        unsigned "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" kind"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        unsigned "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" compact"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        unsigned "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("ascii")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        unsigned "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" ready"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        unsigned "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("24")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    wchar_t "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("wstr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("              "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" wchar_t representation "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("null"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("terminated"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" PyASCIIObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])])]),t._v(" "),s("li",[s("p",[t._v("‍")])])]),t._v(" "),s("p",[t._v("‍")]),t._v(" "),s("h3",{attrs:{id:"哈希冲突"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#哈希冲突"}},[t._v("#")]),t._v(" 哈希冲突")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("由于哈希表本质是将一个无限集合映射到有限集合的函数，因此发生哈希冲突可以说是必然的事。")])]),t._v(" "),s("li",[s("p",[t._v("解决哈希冲突的两种常用方法：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("分离链接法")]),t._v(" "),s("p",[t._v("​"),s("img",{attrs:{src:"https://assets.b3logfile.com/siyuan/xxxxxx/assets/image-20230212030608-4ypuwud.png",alt:"image"}}),t._v("​")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("分离链接法")]),t._v(" 为每个哈希槽维护一个链表，所有哈希到同一槽位的键保存到对应的链表中")])])]),t._v(" "),s("li",[s("p",[t._v("开放地址法")]),t._v(" "),s("p",[t._v("​"),s("img",{attrs:{src:"https://assets.b3logfile.com/siyuan/xxxxxx/assets/image-20230212030900-evbalzv.png",alt:"image"}}),t._v("​")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("Python 采用 "),s("strong",[t._v("开放地址法")]),t._v(" ( open addressing )，将数据直接保存于哈希槽位中，如果槽位已被占用，则按照算法尝试另一个。")])]),t._v(" "),s("li",[s("p",[t._v("如上图，key3 哈希到槽位 3 ，但已被 key1 占用了；接着尝试槽位 5 并成功保存。一般而言，第 i次尝试在首槽位基础上加上一定的偏移量di。因此，探测方式因函数 di 而异。常见的方法有 "),s("strong",[t._v("线性探测")]),t._v(" ( linear probing )以及 "),s("strong",[t._v("平方探测")]),t._v(" ( quadratic probing )。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("线性探测")]),t._v(" "),s("p",[t._v("​"),s("img",{attrs:{src:"https://assets.b3logfile.com/siyuan/xxxxxx/assets/image-20230212030756-qjzk63y.png",alt:"image"}}),t._v("​")]),t._v(" "),s("ul",[s("li",[t._v("顾名思义， di 是一个线性函数，例如di=2∗i")]),t._v(" "),s("li",[t._v("如果哈希表存在局部热点，线性探测很难快速跳过热点区域")])])]),t._v(" "),s("li",[s("p",[t._v("平方探测")]),t._v(" "),s("p",[t._v("​"),s("img",{attrs:{src:"https://assets.b3logfile.com/siyuan/xxxxxx/assets/image-20230212030838-2qndj7s.png",alt:"image"}}),t._v("​")]),t._v(" "),s("ul",[s("li",[t._v("顾名思义， di是一个平方函数，例如 di=i^2")]),t._v(" "),s("li",[t._v("平方探测解决了线性探测无法快速走出热点区域的问题")])])]),t._v(" "),s("li",[s("p",[t._v("貌似平方探测相比线性探测会优秀一些，但实际上两种这样固定的探测序列都会加大冲突的概率，因此Python对此进行了优化，探测函数参考对象哈希值，生成不同的探测序列，进一步降低哈希冲突的可能性。Python键探测方法在"),s("code",[t._v("lookdit")]),t._v("​函数中实现：")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" Py_ssize_t _Py_HOT_FUNCTION\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("lookdict")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("PyDictObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("mp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" PyObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n         Py_hash_t hash"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" PyObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("value_addr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    size_t i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mask"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" perturb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    PyDictKeysObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("dk"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    PyDictKeyEntry "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ep0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\ntop"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    dk "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ma_keys"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    ep0 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("DK_ENTRIES")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dk"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    mask "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("DK_MASK")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dk"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    perturb "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" hash"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size_t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("hash "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" mask"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        Py_ssize_t ix "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dk_get_index")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dk"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略键比较部分代码")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 计算下个槽位")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 由于参考了对象哈希值，探测序列因哈希值而异")]),t._v("\n        perturb "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>=")]),t._v(" PERTURB_SHIFT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" perturb "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" mask"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Py_UNREACHABLE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])])])])])])])]),t._v(" "),s("p",[t._v("‍")]),t._v(" "),s("h3",{attrs:{id:"哈希攻击"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#哈希攻击"}},[t._v("#")]),t._v(" 哈希攻击")]),t._v(" "),s("ul",[s("li",[t._v("Python 在 3.3 以前， 哈希算法 只根据对象本身计算哈希值。因此，只要 Python 解释器相同，对象哈希值也肯定相同，这就导致了受到哈希攻击的可能性。例如向一台 Python 2 Web 服务器 post 一个 json 数据，数据包含大量的 key ，所有 key 的哈希值相同。这意味着哈希表将频繁发生哈希冲突，性能由O(1) 急剧下降为 O(N)，被活生生打垮！")]),t._v(" "),s("li",[t._v("但Python3.3之后哈希算法将同时参考对象本身以及Python解释器运行时生成的一个随机数-salt，这样一来，攻击者无法获悉解释器内部的随机数，也就杜绝了 "),s("strong",[t._v("哈希攻击")]),t._v(" 的可能性。")])]),t._v(" "),s("p",[t._v("‍")]),t._v(" "),s("h3",{attrs:{id:"删除操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#删除操作"}},[t._v("#")]),t._v(" 删除操作")]),t._v(" "),s("p",[t._v("例如场景：")]),t._v(" "),s("p",[t._v("​"),s("img",{attrs:{src:"https://assets.b3logfile.com/siyuan/xxxxxx/assets/image-20230212031904-7r9mi1b.png",alt:"image"}})]),t._v(" "),s("p",[t._v("​key1 最先插入，使用了哈希槽位 5 以及存储单元 0 ；紧接着插入 key2 ，使用了哈希槽位 1 以及存储单元 1 ；最后插入 key3 时，由于哈希槽位被 key2 占用，改用槽位 6 。")]),t._v(" "),s("p",[t._v("如果删除key2时直接将哈希表位置置空则会影响key3的查询，因此在删除时需要位对应的哈希槽设置一个特殊的标识DUMMY，避免中断哈希探测链。")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("DKIX_EMPTY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("DKIX_DUMMY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  ")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Used internally */")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("DKIX_ERROR")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),t._v("\n")])])]),s("p",[t._v("对于键值对中被删除的单元则不会做容量调整操作，而是直接不管，之后新插入的时候依旧是插入在键值对数组的最后-造成了一些空间浪费但无伤大雅。")]),t._v(" "),s("blockquote",[s("p",[t._v("分离链接法查找效率更高，但空间开销较大（链表指针）；而开放地址法比较节约内存，但哈希冲突会更频繁。Python选择后者，然后哈希表只写不删，满了之后就重新分配哈希表，保证数据不会太满，冲突被控制在一定范围内。")])]),t._v(" "),s("p",[t._v("当存储单元已经用完时则进行以此容量调整，重新分配哈希表并将所有元素搬过去。")]),t._v(" "),s("p",[t._v("​"),s("img",{attrs:{src:"https://assets.b3logfile.com/siyuan/xxxxxx/assets/image-20230212032303-aynpoxj.png",alt:"image"}}),t._v("​")]),t._v(" "),s("p",[t._v("‍")]),t._v(" "),s("h2",{attrs:{id:"优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优化"}},[t._v("#")]),t._v(" 优化")]),t._v(" "),s("h3",{attrs:{id:"分离模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分离模式"}},[t._v("#")]),t._v(" 分离模式")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("在Python早期，哈希表并没有分成两个数组来实现，而是由一个键值对数组实现，同时这个数组也承担哈希索引的角色。​​")])]),t._v(" "),s("li",[s("p",[t._v("但是由于哈希表必须保证稀疏的特性（至少浪费"),s("code",[t._v("1/3")]),t._v("​的空间），而一个PyDictKeyEntry 大小达 24 字节，对此会造成大量的内存空间浪费。")])]),t._v(" "),s("li",[s("p",[t._v("因此最后分成了索引数组和键值对数组两个数组的实现方式。")]),t._v(" "),s("ul",[s("li",[t._v("索引数组可以根据哈希表规模选择尽可能小的整数类型，例如规模小于256，选择8位整数即可。")])])])]),t._v(" "),s("p",[t._v("​"),s("img",{attrs:{src:"https://assets.b3logfile.com/siyuan/xxxxxx/assets/image-20230212023959-b0jflbh.png",alt:"image"}}),t._v("​")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("​"),s("code",[t._v("哈希表规模")]),t._v("​")]),t._v(" "),s("th",[t._v("​"),s("code",[t._v("条目表规模")]),t._v("​")]),t._v(" "),s("th",[t._v("​"),s("code",[t._v("旧方案")]),t._v("​")]),t._v(" "),s("th",[t._v("​"),s("code",[t._v("新方案")]),t._v("​")]),t._v(" "),s("th",[t._v("​"),s("code",[t._v("节约内存")]),t._v("​")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("8")]),t._v(" "),s("td",[t._v("8 * 2 / 3 = 5")]),t._v(" "),s("td",[t._v("24 * 8 = 192")]),t._v(" "),s("td",[t._v("1 * 8 + 24 * 5 = 128")]),t._v(" "),s("td",[t._v("64")])]),t._v(" "),s("tr",[s("td",[t._v("256")]),t._v(" "),s("td",[t._v("256 * 2 / 3 = 170")]),t._v(" "),s("td",[t._v("24 * 256 = 6144")]),t._v(" "),s("td",[t._v("1 * 256 + 24 * 170 = 4336")]),t._v(" "),s("td",[t._v("1808")])]),t._v(" "),s("tr",[s("td",[t._v("65536")]),t._v(" "),s("td",[t._v("65536 * 2 / 3 = 43690")]),t._v(" "),s("td",[t._v("24 * 65536 = 1572864")]),t._v(" "),s("td",[t._v("2 * 65536 + 24 * 43690 = 1179632")]),t._v(" "),s("td",[t._v("393232")])])])]),t._v(" "),s("p",[t._v("‍")]),t._v(" "),s("h3",{attrs:{id:"保持插入序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#保持插入序"}},[t._v("#")]),t._v(" 保持插入序")]),t._v(" "),s("p",[t._v("而且引入第二层数组之后，字典变得有序了。字典内键值对的顺序变得可依赖")]),t._v(" "),s("p",[t._v("‍")]),t._v(" "),s("h3",{attrs:{id:"删除key不复用空间"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#删除key不复用空间"}},[t._v("#")]),t._v(" 删除key不复用空间")]),t._v(" "),s("p",[t._v("‍")]),t._v(" "),s("h2",{attrs:{id:"qa"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#qa"}},[t._v("#")]),t._v(" QA")]),t._v(" "),s("h3",{attrs:{id:"为什么使用pyobject-head而不是pyobject-var-head"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么使用pyobject-head而不是pyobject-var-head"}},[t._v("#")]),t._v(" 为什么使用PyObject_HEAD而不是PyObject_VAR_HEAD")]),t._v(" "),s("p",[t._v("‍")])])}),[],!1,null,null,null);s.default=e.exports}}]);