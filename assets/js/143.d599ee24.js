(window.webpackJsonp=window.webpackJsonp||[]).push([[143],{422:function(t,a,s){"use strict";s.r(a);var n=s(14),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"pytz"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pytz"}},[t._v("#")]),t._v(" pytz")]),t._v(" "),a("h2",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),a("p",[t._v("pytz是一个Python库，提供了对时区处理的支持。在pytz中，有两个重要的方法localize和normalize，它们可以用于将datetime对象从本地时间转换为UTC时间，或从UTC时间转换为本地时间。")]),t._v(" "),a("p",[t._v("‍")]),t._v(" "),a("h2",{attrs:{id:"使用示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用示例"}},[t._v("#")]),t._v(" 使用示例")]),t._v(" "),a("h3",{attrs:{id:"localize"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#localize"}},[t._v("#")]),t._v(" localize")]),t._v(" "),a("p",[t._v("localize()方法用于将一个没有时区信息的datetime对象转换为具有时区信息的datetime对象。它需要一个参数，即目标时区的pytz时区对象。以下是一个localize()方法的示例：")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" pytz\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" datetime "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" datetime\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建一个表示美国纽约时区的pytz时区对象")]),t._v("\nny_tz "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pytz"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("timezone"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'America/New_York'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建一个本地时间的datetime对象")]),t._v("\nlocal_time "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" datetime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2023")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("28")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用localize()方法将本地时间转换为纽约时区时间")]),t._v("\nny_time "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ny_tz"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("localize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("local_time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 打印输出本地时间和纽约时区时间")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Local Time:"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" local_time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"NY Time:"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ny_time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""\nLocal Time: 2023-03-28 10:30:00\nNY Time: 2023-03-28 10:30:00-04:00\n"""')]),t._v("\n")])])]),a("p",[t._v("在上述代码中，我们首先创建了一个表示美国纽约时区的pytz时区对象。然后，我们使用datetime()方法创建了一个没有时区信息的datetime对象local_time。最后，我们使用localize()方法将local_time转换为纽约时区时间，并将其赋值给ny_time变量。最终，我们打印输出本地时间和纽约时区时间。")]),t._v(" "),a("p",[t._v("‍")]),t._v(" "),a("h3",{attrs:{id:"normalize"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#normalize"}},[t._v("#")]),t._v(" normalize")]),t._v(" "),a("p",[t._v("normalize()方法用于将一个带有时区信息的datetime对象，转换为指定时区下的标准时间。它需要一个参数，即目标时区的pytz时区对象。以下是一个normalize()方法的示例：")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" pytz\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" datetime "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" datetime\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建一个表示美国纽约时区的pytz时区对象")]),t._v("\nny_tz "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pytz"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("timezone"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'America/New_York'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nutc_tz "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pytz"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("timezone"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'UTC'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建一个表示纽约时区时间的datetime对象")]),t._v("\nny_time "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" datetime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2023")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("28")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tzinfo"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("ny_tz"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用normalize()方法将纽约时区时间转换为UTC时间")]),t._v("\nutc_time "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" utc_tz"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("normalize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ny_time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 打印输出纽约时区时间和UTC时间")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"NY Time:"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ny_time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"UTC Time:"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" utc_time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""\nNY Time: 2023-03-28 10:30:00-04:56\nUTC Time: 2023-03-28 15:26:00+00:00\n"""')]),t._v("\n")])])]),a("p",[t._v("在上述代码中，我们首先创建了一个表示美国纽约时区的pytz时区对象。然后，我们使用datetime()方法创建了一个带有时区信息的datetime对象ny_time，表示纽约时区的时间。最后，我们使用normalize()方法将ny_time转换为UTC时间，并将其赋值给utc_time变量。最终，我们打印输出纽约时区时间和UTC时间。")]),t._v(" "),a("p",[t._v("‍")])])}),[],!1,null,null,null);a.default=e.exports}}]);