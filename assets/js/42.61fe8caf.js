(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{323:function(t,s,a){"use strict";a.r(s);var n=a(14),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"int"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#int"}},[t._v("#")]),t._v(" int")]),t._v(" "),s("h2",{attrs:{id:"内部结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内部结构"}},[t._v("#")]),t._v(" 内部结构")]),t._v(" "),s("h3",{attrs:{id:"longobject-pylongobject"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#longobject-pylongobject"}},[t._v("#")]),t._v(" _longobject PyLongObject")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("_longobject")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    PyObject_VAR_HEAD\n    digit ob_digit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对于比较大的整数， Python 将其拆成若干部分，保存在 ob_digit 数组中。")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//C 语言中数组长度不是类型信息，我们可以根据实际需要为 ob_digit 数组分配足够的内存，并将其当成长度为 n 的数组操作。")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 数组的长度 由PyObject_VAR_HEAD宏定义中的ob_size存储")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("_longobject")]),t._v(" PyLongObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Revealed in longintrepr.h */")]),t._v("\n")])])]),s("h3",{attrs:{id:"digit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#digit"}},[t._v("#")]),t._v(" digit")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[t._v("PYLONG_BITS_IN_DIGIT "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")])])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("uint32_t")]),t._v(" digit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 32位")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("elif")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[t._v("PYLONG_BITS_IN_DIGIT "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")])])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("short")]),t._v(" digit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 16位")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")])]),t._v("\n")])])]),s("p",[t._v("​"),s("img",{attrs:{src:"https://assets.b3logfile.com/siyuan/xxxxxx/assets/image-20230208202213-zipbq24.png",alt:"image"}}),t._v("​")]),t._v(" "),s("h3",{attrs:{id:"pylong-type"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pylong-type"}},[t._v("#")]),t._v(" PyLong_Type")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("PyTypeObject PyLong_Type "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("PyVarObject_HEAD_INIT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("PyType_Type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"int"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("                                      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* tp_name */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("offsetof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("PyLongObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ob_digit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("           "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* tp_basicsize */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("digit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("                              "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* tp_itemsize */")]),t._v("\n    long_dealloc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("                               "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* tp_dealloc */")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//...")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("long_as_number"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("                            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* tp_as_number */")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//...")]),t._v("\n\n    long_new"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("                                   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* tp_new */")]),t._v("\n    PyObject_Del"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("                               "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* tp_free */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"long-as-number"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#long-as-number"}},[t._v("#")]),t._v(" long_as_number")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" PyNumberMethods long_as_number "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("binaryfunc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("long_add"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*nb_add*/")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("binaryfunc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("long_sub"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*nb_subtract*/")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("binaryfunc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("long_mul"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*nb_multiply*/")]),t._v("\n    long_mod"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("                   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*nb_remainder*/")]),t._v("\n    long_divmod"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*nb_divmod*/")]),t._v("\n    long_pow"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("                   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*nb_power*/")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("unaryfunc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("long_neg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*nb_negative*/")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("unaryfunc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("long_long"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*tp_positive*/")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("unaryfunc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("long_abs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*tp_absolute*/")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inquiry"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("long_bool"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("         "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*tp_bool*/")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("unaryfunc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("long_invert"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*nb_invert*/")]),t._v("\n    long_lshift"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*nb_lshift*/")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("binaryfunc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("long_rshift"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*nb_rshift*/")]),t._v("\n    long_and"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("                   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*nb_and*/")]),t._v("\n    long_xor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("                   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*nb_xor*/")]),t._v("\n    long_or"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("                    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*nb_or*/")]),t._v("\n    long_long"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("                  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*nb_int*/")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("​"),s("img",{attrs:{src:"https://assets.b3logfile.com/siyuan/xxxxxx/assets/image-20230208205743-lizbn7v.png",alt:"image"}}),t._v("​")]),t._v(" "),s("p",[t._v("‍")]),t._v(" "),s("h2",{attrs:{id:"整数布局"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#整数布局"}},[t._v("#")]),t._v(" 整数布局")]),t._v(" "),s("ul",[s("li",[t._v("整数 "),s("strong",[t._v("绝对值")]),t._v(" 拆分成多个部分，存放于 "),s("strong",[t._v("底层整数数组")]),t._v(" ob_digit ；")]),t._v(" "),s("li",[t._v("底层数组长度保存在 ob_size 字段，如果整数为负， ob_size 也为负；")]),t._v(" "),s("li",[t._v("对于整数 0 ，底层数组为空， ob_size 字段为 0 ；")])]),t._v(" "),s("p",[t._v("例如：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("对于整数 0 ， ob_size 字段等于 0 ， ob_digit 数组为空，无需分配。")])]),t._v(" "),s("li",[s("p",[t._v("对于整数 10 ，其绝对值保存于 ob_digit 数组中，数组长度为 1 ， ob_size 字段等于 1 。")])]),t._v(" "),s("li",[s("p",[t._v("对于整数 -10 ，其绝对值同样保存于 ob_digit 数组中，但由于 -10 为负数， ob_size 字段等于 -1 。")])]),t._v(" "),s("li",[s("p",[t._v("对于整数 1073741824 ( 2 的 30 次方)，由于 ** Python 只使用 32 整数的后 30 位**，需要另一个整数才能存储，整数数组长度为 2 。绝对值这样计算："),s("code",[t._v("2^30*1+2^0*0=1073741824")]),t._v("​。")]),t._v(" "),s("blockquote",[s("p",[t._v("如果全部 32 位都用来保存绝对值，那么为了保证加法不溢出 (产生进位)，需要先强制转换成 64 位类型后在进行计算。但牺牲最高 1 位后，加法运算便不用担心进位溢出了。")]),t._v(" "),s("p",[t._v("那么，为什么 Python 牺牲最高 2 位呢？我猜这是为了和 16 位整数方案统一起来：如果选用 16 位整数作为数组， Python 则只使用其中 15 位。")])])]),t._v(" "),s("li",[s("p",[t._v("对于整数 -4294967297 (负的 2 的 32 次方加 1 )，同样要长度为 2 的 ob_digit 数组，但 ob_size 字段为负。绝对值这样计算："),s("code",[t._v("2^30*4+2^0*1=4294967297")]),t._v("​。")])])]),t._v(" "),s("p",[t._v("‍")]),t._v(" "),s("h2",{attrs:{id:"内存优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内存优化"}},[t._v("#")]),t._v(" 内存优化")]),t._v(" "),s("h3",{attrs:{id:"小整数静态对象池"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小整数静态对象池"}},[t._v("#")]),t._v(" 小整数静态对象池")]),t._v(" "),s("blockquote",[s("p",[t._v("为什么是对象池而不是空闲对象链表：")]),t._v(" "),s("p",[t._v("缓存池比空闲链表更快，因为对象是已经初始化好了的，直接拿过来就能用。空闲链表只是解决了内存频繁分配的问题，省去了申请内存的开销，但仍然需要重新初始化对象。另外，由于int对象是不定长的，实现空内存链表的话，也只能保存固定大小的一类，比如只缓存底层数组只有一个元素的对象，或者安装底层数组长度，分类缓存。")])]),t._v(" "),s("p",[t._v("同float一样，为了避免运行时大量整数对象被创建销毁（例如"),s("code",[t._v("for i in range(100)")]),t._v("​），严重拖慢性能，Python提供了一个小整数池的解决方案：提前将常用的整数对象创建好，以备后用。")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("ifndef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[t._v("NSMALLPOSINTS")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("NSMALLPOSINTS")]),t._v("           "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("257")]),t._v(" ")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正数个数，默认从0开始")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("ifndef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[t._v("NSMALLNEGINTS")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("NSMALLNEGINTS")]),t._v("           "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("  ")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 负数个数")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" PyLongObject small_ints"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("NSMALLNEGINTS "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" NSMALLPOSINTS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 小整数池")]),t._v("\n")])])]),s("p",[t._v("​"),s("img",{attrs:{src:"https://assets.b3logfile.com/siyuan/xxxxxx/assets/image-20230208203325-s2chcif.png",alt:"image"}}),t._v("​")]),t._v(" "),s("p",[t._v("‍")]),t._v(" "),s("h3",{attrs:{id:"常用整数优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用整数优化"}},[t._v("#")]),t._v(" 常用整数优化")]),t._v(" "),s("blockquote",[s("p",[t._v("注意在3.11中如下的解释器层级的优化是存在的，但是在更低版本的python中可能不成立。")])]),t._v(" "),s("p",[t._v("虽然python仅对"),s("code",[t._v("[-5,256]")]),t._v("​的小整数建立常量池，但是对于超过这个范围的常用整数也做了一定优化：对于在编译时就可以确定值相同的变量让指向同一个对象。")]),t._v(" "),s("p",[t._v("例如下面例子中的1235，都是在执行前就可以确定，因此所有数实际都指向到同一个对象，但是例子4由于要进行运算才能知道值因此没有指向同一个对象。")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000")]),t._v("\nb "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# True")]),t._v("\n\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000")]),t._v("\nb "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# True")]),t._v("\n\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000")]),t._v("\nb "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# True")]),t._v("\n\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000")]),t._v("\nb "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# False")]),t._v("\n\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\nb "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("\nc "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("111")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\nd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" c "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# True")]),t._v("\n")])])]),s("p",[t._v("‍")]),t._v(" "),s("h2",{attrs:{id:"奇巧淫技"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#奇巧淫技"}},[t._v("#")]),t._v(" 奇巧淫技")]),t._v(" "),s("p",[t._v("可以dis一下整数的+=，可以发现其实际上分为了两个字节码，即"),s("code",[t._v("a+=b")]),t._v("​实际上和"),s("code",[t._v("a=a+b")]),t._v("​是一致的，都是先计算结果然后赋值给a，既然有了两个字节码，就有可能出现racing的情况，但是我们可以用一种奇特的方法实现整数不会racing的"),s("code",[t._v("+1")]),t._v("​操作:")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" dis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dis")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"n=1;n+=1;"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("           "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" LOAD_CONST               "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n              "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" STORE_NAME               "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n              "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" LOAD_NAME                "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n              "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(" LOAD_CONST               "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n              "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" INPLACE_ADD\n             "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" STORE_NAME               "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n             "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v(" LOAD_CONST               "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("None"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n             "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("14")]),t._v(" RETURN_VALUE\n")])])]),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("# 这段代码来自asyncio\n# 生成新的 task 时的命名计数器\n# 这里不采用 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" 的操作是因为协程并非线程安全\n# 通过迭代器不断的向后计数，可以完美的保证线程安全\n_task_name_counter "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" itertools"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__next__\n\n# 使用方式\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" name is None"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" f"),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'Task-{_task_name_counter()}'")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);