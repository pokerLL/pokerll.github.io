(window.webpackJsonp=window.webpackJsonp||[]).push([[251],{531:function(t,s,a){"use strict";a.r(s);var n=a(14),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"理解python协程的本质"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#理解python协程的本质"}},[t._v("#")]),t._v(" 理解Python协程的本质")]),t._v(" "),s("hr"),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/330549526",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://zhuanlan.zhihu.com/p/330549526 - 知乎专栏"),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("这两天因为一点个人原因写了点好久没碰的python，其中涉及到协程编程，上次搞的时候，它还是web框架 tornado特有的feature，现在已经有async await 关键字支持了。思考了一下其实现，回顾了下这些年的演变，觉得还…")]),t._v(" "),s("li",[t._v("2023-01-10 14:32:12")])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("这两天因为一点个人原因写了点好久没碰的python，其中涉及到协程编程，上次搞的时候，它还是web框架"),s("code",[t._v("tornado")]),t._v("​特有的feature，现在已经有"),s("code",[t._v("asyncawait")]),t._v("​ 关键字支持了。思考了一下其实现，回顾了下这些年的演变，觉得还有点意思。")]),t._v(" "),s("blockquote",[s("p",[t._v("都是单线程，为什么原来低效率的代码用了"),s("code",[t._v("async await")]),t._v("​加一些异步库就变得效率高了？")])]),t._v(" "),s("p",[t._v("如果你做基于python的网络或者web开发时，对于这个问题曾感到疑惑，这篇文章会给你答案。")]),t._v(" "),s("h2",{attrs:{id:"_0x00-开始之前"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_0x00-开始之前"}},[t._v("#")]),t._v(" 0x00 开始之前")]),t._v(" "),s("p",[t._v("首先，本文​"),s("strong",[t._v("不是带你浏览源代码")]),t._v("​，然后对照原始代码给你讲python标准的实现。相反，我们会从实际问题出发，思考解决问题的方案，一步步体会解决方案的演进路径，最重要的，希望能在过程中获得知识系统性提升。")]),t._v(" "),s("p",[s("strong",[t._v("⚠️ 本文仅是提供此了一个独立的思考方向，并未遵循历史和现有实际具体的实现细节。")])]),t._v(" "),s("p",[t._v("其次，阅读这篇文章需要你对python比较熟悉，至少了解python中的生成器"),s("code",[t._v("generator")]),t._v("​的概念。")]),t._v(" "),s("h2",{attrs:{id:"_0x01-io-多路复用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_0x01-io-多路复用"}},[t._v("#")]),t._v(" 0x01 IO 多路复用")]),t._v(" "),s("p",[t._v("这是性能的关键。但我们这里只解释概念，其实现细节不是重点，这对我们理解python的协程已经足够了，如已足够了解，前进到"),s("code",[t._v("0x02")]),t._v("​。")]),t._v(" "),s("p",[t._v("首先，你要知道所有的网络服务程序都是一个巨大的死循环，你的业务逻辑都在这个循环的某个时刻被调用：")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("handler")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 处理请求")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pass")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 你的 handler 运行在 while 循环中")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取一个新请求")]),t._v("\n    request "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" accept"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 根据路由映射获取到用户写的业务逻辑函数")]),t._v("\n    handler "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" get_handler"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 运行用户的handler，处理请求")]),t._v("\n    handler"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("设想你的web服务的某个"),s("code",[t._v("handler")]),t._v("​，在接收到请求后需要一个api调用才能响应结果。对于最传统的网络应用，你的api请求发出去后在等待响应，此时程序停止运行，甚至新的请求也得在响应结束后才进得来。如果你依赖的API请求网络丢包严重，响应特别慢呢？那应用的吞吐量将非常低。")]),t._v(" "),s("p",[t._v("很多传统web服务器使用多线程技术解决这个问题：把"),s("code",[t._v("handler")]),t._v("​的运行放到其他线程上，每个线程处理一个请求，本线程阻塞不影响新请求进入。这能一定程度上解决问题，但对于并发比较大的系统，过多线程调度会带来很大的性能开销。")]),t._v(" "),s("p",[t._v("IO多路复用可以做到不使用线程解决问题，它是由操作系统内核提供的功能，可以说专门为这类场景而生。简单来讲，你的程序遇到网络IO时，告诉操作系统帮你盯着，同时操作系统提供给你一个方法，让你可以随时获取到有哪些io操作已经完成。就像这样：")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 操作系统的IO复用示例伪代码")]),t._v("\nio_register"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("io_id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" io_type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 向操作系统io注册自己关注的io操作的id和类型")]),t._v("\nio_register"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("io_id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" io_type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取完成的io操作, 使用 epoll() in Linux and kqueue() in Unix")]),t._v("\nevents "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" io_get_finished"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("io_id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" io_type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" events"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" io_type "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" READ"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" read_data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("io_id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("elif")]),t._v(" io_type "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" WRITE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        write_data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("io_id，data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("把IO复用逻辑融合到我们的服务器中，大概会像这样：")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("call_backs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("handler")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("req"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# do jobs here")]),t._v("\n    io_register"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("io_id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" io_type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("call_back")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用返回的result完成剩余工作")]),t._v("\n    call_backs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("io_id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" call_back\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 新的循环")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),t._v("：\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取已经完成的io事件")]),t._v("\n    events "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" io_get_finished"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("io_id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" io_type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" events"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" io_type "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" READ"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 读取")]),t._v("\n            data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" read"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("io_id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            call_back "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" call_backs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("io_id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n            call_back"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 其他类型io事件的处理")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pass")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取一个新请求")]),t._v("\n    request "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" accept"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 根据路由映射获取到用户写的业务逻辑函数")]),t._v("\n    handler "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" get_handler"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 运行用户的handler，处理请求")]),t._v("\n    handler"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("我们的handler对于IO操作，注册了回调就立刻返回，同时每次迭代都会对已完成的IO执行回调，网络请求不再阻塞整个服务器。")]),t._v(" "),s("p",[t._v("上面的伪代码仅便于理解，具体实现细节更复杂。而且就连接受新请求也是在从操作系统得到监听端口的IO事件后进行的。我们如果把循环部分还有"),s("code",[t._v("call_backs")]),t._v("​字典拆分到单独模块，就能得到一个"),s("code",[t._v("EventLoop")]),t._v("​，也就是python标准库 "),s("code",[t._v("asyncio")]),t._v("​包中提供的"),s("code",[t._v("ioloop")]),t._v("​")]),t._v(" "),s("h2",{attrs:{id:"_0x02-用生成器消除-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_0x02-用生成器消除-callback"}},[t._v("#")]),t._v(" 0x02 用生成器消除 callback")]),t._v(" "),s("p",[t._v("着重看下我们业务中经常写的handler函数，在有独立的ioloop后，它现在变成类似这样：")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("handler")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 业务逻辑代码")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 需要执行一次API请求")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("call_back")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用API返回的result完成剩余工作")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 注册回调，没有io_call这个方法，仅示意，表示注册一个io操作")]),t._v("\n    asyncio"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_event_loop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("io_call"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("api"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" call_back"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("到这里，性能问题已经解决了：我们不再需要多线程就能源源不断接受新请求，而且不用care依赖的API响应有多慢。")]),t._v(" "),s("p",[t._v("但是我们也引入了一个新问题，原来流畅的业务逻辑代码现在被拆成了两部分，请求API之前的代码还正常，请求API之后的代码只能写在回调函数里面了。这里我们业务逻辑只有一个API调用，如果有多个API，再加上对redis或者mysql的调用（它们本质也是网络请求），整个逻辑会被拆分的更散，这对业务开发是一笔负担。对于有匿名函数的一些语言（没错就是javascript），还可能会引发所谓的「回调地狱」。接下来我们想办法解决这个问题。")]),t._v(" "),s("blockquote",[s("p",[t._v("如果函数在运行到网络IO操作处后能够暂停，完成后又能在断点处唤醒就好了。")])]),t._v(" "),s("p",[t._v("如果你对python的"),s("strong",[t._v("生成器")]),t._v("熟悉，你应该会发现，它恰好具有这个功能：")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("example")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    value "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"get"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" value\n\ng "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用send(None)启动生成器，我们应该会得到 2")]),t._v("\ngot "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" g"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("send"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("got"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# 再次启动 会显示 "get 4", 就是我们传入的值')]),t._v("\n    got "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" g"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("send"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("got"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("except")]),t._v(" StopIteration "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 生成器运行完成，将会print(4)，e.value 是生成器return的值")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("函数中有"),s("code",[t._v("yield")]),t._v("​关键字，调用函数将会得到一个生成器，生成器一个关键的方法"),s("code",[t._v("send()")]),t._v("​可以跟生成器交互。"),s("code",[t._v("g.send(None)")]),t._v("​ 会运行生成器内代码直到遇到"),s("code",[t._v("yield")]),t._v("​，并返回其后的对象，也就是"),s("code",[t._v("2")]),t._v("​，生成器代码就停在这里了，直到我们再次执行"),s("code",[t._v("g.send(got*2)")]),t._v("​,会把"),s("code",[t._v("2*2")]),t._v("​也就是"),s("code",[t._v("4")]),t._v("​ 赋值给"),s("code",[t._v("yield")]),t._v("​前面的变量"),s("code",[t._v("value")]),t._v("​,然后继续运行生成器代码。 "),s("strong",[t._v("yield在这里就像一扇门，可以把一件东西从这里送出去，也可以把另一件东西拿进来。")])]),t._v(" "),s("p",[t._v("如果"),s("code",[t._v("send")]),t._v("​让生成器运行到下一个"),s("code",[t._v("yield")]),t._v("​前就结束了，send调用会引发一个特殊的异常"),s("code",[t._v("StopIteration")]),t._v("​，这个异常自带一个属性"),s("code",[t._v("value")]),t._v("​，为生成器return的值。")]),t._v(" "),s("p",[t._v("如果我们把我们的"),s("code",[t._v("handler")]),t._v("​用"),s("code",[t._v("yield")]),t._v("​关键字转换成一个生成器，运行它来把"),s("strong",[t._v("IO操作的具体内容")]),t._v("返回，IO完成后的回调函数中把IO结果放回并恢复生成器运行，那就解决了业务代码不流畅的问题了：")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("handler")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 业务逻辑代码")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 需要执行一次API请求，直接把IO请求信息yield出去")]),t._v("\n    result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" io_info\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用API返回的result完成剩余工作")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这个函数注册到ioloop中，用来当有新请求的时候回调")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("on_request")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 根据路由映射获取到用户写的业务逻辑函数")]),t._v("\n    handler "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" get_handler"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    g "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" handler"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 首次启动获得io_info")]),t._v("\n    io_info "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" g"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("send"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# io完成回调函数")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("call_back")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        g"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("send"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重新启动生成器")]),t._v("\n\n    asyncio"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_event_loop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("io_call"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("io_info"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" call_back"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("上面的例子，用户写的"),s("code",[t._v("handler")]),t._v("​代码已经不会被打散到callback 中，"),s("code",[t._v("on_request")]),t._v("​函数使用callback和"),s("code",[t._v("ioloop")]),t._v("​交互，但它会被实现在web框架中，对用户不可见。上面代码足以给我们提供用生成器消灭的callback的启发，但局限性有两点：")]),t._v(" "),s("ol",[s("li",[t._v("业务逻辑中仅发起一次网络IO，但实际中往往更多")]),t._v(" "),s("li",[t._v("业务逻辑没有调用其他异步函数（协程），但实际中我们往往会调用其他协程")])]),t._v(" "),s("h2",{attrs:{id:"_0x03-解决完整调用链"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_0x03-解决完整调用链"}},[t._v("#")]),t._v(" 0x03 解决完整调用链")]),t._v(" "),s("p",[t._v("我们来看一个更复杂的例子：")]),t._v(" "),s("p",[t._v("函数调用链路图。")]),t._v(" "),s("p",[t._v("其中"),s("code",[t._v("request")]),t._v("​ 执行真正的IO，"),s("code",[t._v("func1 func2")]),t._v("​ 仅调用。显然我们的代码只能写成这样：")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("func1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    ret "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://test.com/foo"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    ret "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" func2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ret"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ret\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("func2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://test.com/"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("request")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这里模拟返回一个io操作，包含io操作的所有信息，这里用URL简化")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# "iojob of %s" % url 部分模拟注册IO操作到ioloop')]),t._v("\n    result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"iojob of %s"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" url\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result\n")])])]),s("p",[t._v("对于"),s("code",[t._v("request")]),t._v("​，我们把IO操作通过yield暴露给框架。​"),s("strong",[t._v("对于")]),t._v("​**"),s("code",[t._v("func1")]),s("strong",[t._v("​ ** 和 "),s("strong",[t._v("​")]),s("code",[t._v("func2")]),s("strong",[t._v("​ "),s("strong",[t._v("，调用")]),t._v("​")]),s("code",[t._v("request")]),s("strong",[t._v("​")]),t._v("显然也要加")]),t._v("​**"),s("code",[t._v("yield")]),s("strong",[t._v("​")]),t._v("关键字**​，否则"),s("code",[t._v("request")]),t._v("​调用返回一个生成器后不会暂停，继续执行后续逻辑显然会出错。")]),t._v(" "),s("p",[t._v("这基本就是我们在没有"),s("code",[t._v("yield from aysnc await")]),t._v("​时代，在tornado框架中写异步代码的样子。")]),t._v(" "),s("p",[t._v("要运行整个调用栈，大概流程如下：")]),t._v(" "),s("ol",[s("li",[t._v("调用"),s("code",[t._v("func1()")]),t._v("​得到生成器")]),t._v(" "),s("li",[t._v("调用"),s("code",[t._v("send(None)")]),t._v("​启动它得到会得到"),s("code",[t._v('request("http://test.com/foo")')]),t._v("​的结果，还是生成器对象")]),t._v(" "),s("li",[t._v("​"),s("code",[t._v("send(None)")]),t._v("​启动由"),s("code",[t._v("request()")]),t._v("​产生的生成器，会得到IO操作，由框架注册到ioloop并指定回调")]),t._v(" "),s("li",[t._v("IO完成后的回调函数内唤醒"),s("code",[t._v("request")]),t._v("​生成器，生成器会走到"),s("code",[t._v("return")]),t._v("​语句结束")]),t._v(" "),s("li",[t._v("捕获异常得到"),s("code",[t._v("request")]),t._v("​生成器的返回值，将上一层"),s("code",[t._v("func1")]),t._v("​唤醒，同时又得到"),s("code",[t._v("func2()")]),t._v("​生成器")]),t._v(" "),s("li",[t._v("... 继续执行")])]),t._v(" "),s("p",[t._v("对算法和数据结构熟悉的朋友遇到这种前进后退的遍历逻辑，可以递归也可以用栈，因为递归使用生成器还做不到，我们可以使用栈，其实这就是「调用栈」一词的由来。")]),t._v(" "),s("p",[t._v("​"),s("img",{attrs:{src:"assets/v2-25ac28c9f9be1247a3b2b401447f0964_b-20230110143212-m13u26r.jpg",alt:""}}),t._v("​")]),t._v(" "),s("p",[t._v("调用栈示意")]),t._v(" "),s("p",[t._v("借助栈，我们可以​"),s("strong",[t._v("把整个调用链上串联的所有生成器对表现为一个生成器")]),t._v("​，对其不断send就能不断得到所有io操作信息并推动调用链前进，实现方法如下：")]),t._v(" "),s("ol",[s("li",[t._v("第一个生成器入栈")]),t._v(" "),s("li",[t._v("调用"),s("code",[t._v("send")]),t._v("​，如果得到生成器就入栈并进入下一轮迭代")]),t._v(" "),s("li",[t._v("遇到到IO请求"),s("code",[t._v("yield")]),t._v("​出来，让框架注册到ioloop")]),t._v(" "),s("li",[t._v("IO操作完成后被唤醒，缓存结果并出栈，进入下一轮迭代，目的让上层函数使用IO结果恢复运行")]),t._v(" "),s("li",[t._v("如果一个生成器运行完毕，也需要和4一样让上层函数恢复运行")])]),t._v(" "),s("p",[t._v("如果实现出来，代码不长但信息量比较大。他把整个调用链对外变成一个生成器，对其调用send，就能整个调用链中的IO，完成这些IO，继续推动调用链内的逻辑执行，直到整体逻辑结束：")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("wrapper")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("gen"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 第一层调用 入栈")]),t._v("\n    stack "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Stack"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    stack"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("push"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("gen"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 开始逐层调用")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取栈顶元素")]),t._v("\n        item "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" stack"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("peak"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" isgenerator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 生成器，")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 尝试获取下个生成器调用，并入栈")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# result 初始为None，之后迭代中将为下层调用的返回值")]),t._v("\n                child "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("send"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),t._v("\n                stack"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("push"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("child"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 入栈后直接进入下次循环，继续深入调用链")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("continue")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("except")]),t._v(" StopIteration "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果自己运行结束了，就暂存result，下一步让自己出栈")]),t._v("\n                result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# io 操作")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 遇到了io操作，yield出去")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# IO完成后会被用IO结果唤醒并暂存到result")]),t._v("\n            result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" item\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 走到这里则本层已经执行完毕，出栈，下次迭代将回到调用链上一层")]),t._v("\n        stack"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 没有上一层的话，那整个调用链都执行完成了，return")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" stack"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("empty"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"finished"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result\n")])])]),s("p",[t._v("这可能是最复杂的部分，如果一下难以接受可以略过，对于本文理解无碍。只需要知道对于上面示例中的调用链，存在上面这种方法产生如下效果：")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("w "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" wrapper"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("func1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# 启动 wrpper, 将会得到 "iojob of http://test.com/foo"')]),t._v("\nw"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("send"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# 上个iojob foo 完成后的结果"bar"传入，继续运行，得到  "iojob of http://test.com/bar"')]),t._v("\nw"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("send"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bar"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# 上个iojob bar 完成后的结构"barz"传入，继续运行，结束。')]),t._v("\nw"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("send"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"barz"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("有了这部分以后，框架只需要再加上配套的代码：")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 维护一个就绪列表，存放所有完成的IO事件，格式为（wrapper，result）")]),t._v("\nready "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("on_request")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    handler "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" get_handler"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用 wrapper 包装后，可以只通过send处理IO了")]),t._v("\n    g "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" wrapper"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("func1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 把开始状态直接视为结果为None的就绪状态")]),t._v("\n    ready"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("g"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 让ioloop每轮循环都执行此函数，用来处理的就绪的IO，")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("process_ready")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("call_back")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("g"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        ready"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("g"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 遍历所有已经就绪生成器，将其向下推进")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" g"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ready"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 用result唤醒生成器，并得到下一个io操作")]),t._v("\n        io_job "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" g"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("send"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 注册io操作")]),t._v("\n        asyncio"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_event_loop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("io_call"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n            io_job"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 完成后把生成器加入就绪列表，等待下一轮处理")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("lambda")]),t._v(" result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ready"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("g"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("这里核心思想是维护一个就绪列表，ioloop每轮迭代都来扫一遍，推动就绪的状态的生成器向下运行，并把新的到到IO操作注册，IO完成后再次加入就绪，经过几轮ioloop的迭代一个"),s("code",[t._v("handler")]),t._v("​最终会被执行完成。")]),t._v(" "),s("p",[t._v("至此，我们使用生成器写法写业务逻辑已经可以正常运行。")]),t._v(" "),s("h2",{attrs:{id:"_0x04-提高扩展性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_0x04-提高扩展性"}},[t._v("#")]),t._v(" 0x04 提高扩展性")]),t._v(" "),s("p",[t._v("如果到这里能读懂，python的协程原理基本就明白了。我们已经实现了一个微型的协程框架，标准库的实现细节跟这里看起来大不一样，但具体的思想是一致的。")]),t._v(" "),s("p",[t._v("我们的协程框架有一个限制，我们只能把IO操作异步化，虽然在网络编程和web编程的世界里，阻塞的基本只有IO操作，但也有一些例外，比如我想让当前操作"),s("code",[t._v("sleep")]),t._v("​几秒，用"),s("code",[t._v("time.sleep()")]),t._v("​又会让整个线程阻塞住，就需要特殊实现。再比如，可以把一些cpu密集的操作通过多线程异步化，让另一个线程通知事件已经完成后再执行后续。")]),t._v(" "),s("p",[t._v("所以，协程最好能与网络解耦开，让等待网络IO只是其中一种场景，提高扩展性。Python官方的解决方案是让用户自己处理阻塞代码，至于是向ioloop来注册IO事件还是开一个线程完全由你自己，并提供了一个标准「占位符」"),s("code",[t._v("Future")]),t._v("​，表示他的结果等到未来才会有，其部分原型如下:")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Future")]),t._v("：\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置结果")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("set_result")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pass")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取结果")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("result")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pass")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 表示这个future对象是fou已被设置过结果")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("done")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pass")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置在他被设置结果时应该执行的回调函数，可以设置多个")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add_done_callback")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("callback"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pass")]),t._v("\n")])])]),s("p",[t._v("我们的稍加改动就能支持future，让扩展性变得更强。对于用户代码的中的网络请求函数"),s("code",[t._v("request")]),t._v("​：")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 现在 request 函数，不是生成器，它返回future")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("request")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# future 理解为占位符")]),t._v("\n    fut "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Future"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("callback")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 当网络IO完成回调的时候给占位符赋值")]),t._v("\n        fut"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("set_result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 注册回调")]),t._v("\n    asyncio"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_event_loop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("io_call"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" callback"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 返回占位符")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" future\n")])])]),s("p",[t._v("现在，"),s("code",[t._v("request")]),t._v("​不再是一个生成器，而是直接返回future。而对于位于框架中处理就绪列表的函数：")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("process_ready")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("callback")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fut"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# future被设置结果会被放入就绪列表")]),t._v("\n        ready"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("g"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fut"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 遍历所有已经就绪生成器，将其向下推进")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" g"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ready"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 用result唤醒生成器，得到的不再是io操作，而是future")]),t._v("\n        fut "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" g"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("send"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# future被设置结果的时候会调用callback")]),t._v("\n        fut"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("add_done_callback"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("callback"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h2",{attrs:{id:"_0x05-发展和变革"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_0x05-发展和变革"}},[t._v("#")]),t._v(" 0x05 发展和变革")]),t._v(" "),s("p",[t._v("许多年前用"),s("code",[t._v("tornado")]),t._v("​的时候，大概只有一个"),s("code",[t._v("yield")]),t._v("​关键字可用，协程要想实现，就是这么个思路，甚至"),s("code",[t._v("yield")]),t._v("​关键字和"),s("code",[t._v("return")]),t._v("​关键字不能一个函数里面出现，你要想在生成器运行完后返回一个值，需要手动"),s("code",[t._v("raise")]),t._v("​一个异常，虽然效果跟现在"),s("code",[t._v("return")]),t._v("​一样，但写起来还是很别扭，不优雅。")]),t._v(" "),s("p",[t._v("后来有了"),s("code",[t._v("yield from")]),t._v("​ 表达式。他可以做什么？通俗地说，他就是做了上面那个生成器"),s("code",[t._v("wrapper")]),t._v("​所做的事：通过栈实现调用链遍历的 ，​"),s("strong",[t._v("它是")]),t._v("​**"),s("code",[t._v("wrapper")]),s("strong",[t._v("​")]),t._v("逻辑的语法糖**​。有了它，同一个例子你可以这么写：")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("func1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 注意 yield from")]),t._v("\n    ret "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://test.com/foo"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    ret "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" func2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ret"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ret\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("func2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 注意 yield from")]),t._v("\n    result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://test.com/"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("request")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 同上基于future实现的request")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pass")]),t._v("\n")])])]),s("p",[t._v("然后你就不再需要那个烧脑的"),s("code",[t._v("wrapper")]),t._v("​函数了，"),s("code",[t._v("yield from")]),t._v("​ 背后实现了那段晦涩的逻辑：")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("g "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" func1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 返回第一个请求的 future")]),t._v("\ng"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("send"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 继续运行，进入func2 并得到第它里面的那个future")]),t._v("\ng"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("send"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bar"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 继续运行，完成调用链剩余逻辑，抛出StopIteration异常")]),t._v("\ng"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("send"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"barz"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("​"),s("code",[t._v("yield from")]),t._v("​直接打通了整个调用链，这已经算是很大的进步了，但是用来异步编程看着还是别扭，其他语言此时已经有专门的协程"),s("code",[t._v("async await")]),t._v("​关键字了。终于，再后来的版本把这些内容进一步封装到的"),s("code",[t._v("async await")]),t._v("​ 关键字，才成为今天比较优雅的样子。")]),t._v(" "),s("h2",{attrs:{id:"_0x06-总结和比较"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_0x06-总结和比较"}},[t._v("#")]),t._v(" 0x06 总结和比较")]),t._v(" "),s("p",[t._v("总的来说，python的原生的协程从两方面实现：")]),t._v(" "),s("ol",[s("li",[t._v("基于IO多路复用技术，让整个应用在IO上非阻塞，实现高效率")]),t._v(" "),s("li",[t._v("通过生成器让分散的callback代码变成同步代码，减少业务编写困难")])]),t._v(" "),s("p",[t._v("有生成器这种对象的语言，其IO协程实现大抵如此，javascript协程的演进基本一模一样，关键字相同，"),s("code",[t._v("Future")]),t._v("​类比"),s("code",[t._v("Promise")]),t._v("​本质上区别不大。")]),t._v(" "),s("p",[t._v("但是对于以协程闻名的"),s("code",[t._v("go")]),t._v("​语言，协程实现跟这个就不同了，它并不基于已有的生成器数据结构。如果要类比的话，可以勉强和python的"),s("code",[t._v("gevent")]),t._v("​算作一类，都是自己实现runtime，并patch掉直接的系统调用接入自己的runtime，自己来调度协程，gevent专注于网络相关，基于网络IO调度，比较简单，go实现了完善的多核支持，调度更加复杂和完善，而且创造了基于"),s("code",[t._v("channel")]),t._v("​新编程范式。")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("以上。")])])}),[],!1,null,null,null);s.default=e.exports}}]);