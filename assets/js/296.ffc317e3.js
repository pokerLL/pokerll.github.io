(window.webpackJsonp=window.webpackJsonp||[]).push([[296],{575:function(t,a,s){"use strict";s.r(a);var n=s(14),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"gunicorn-wsgi服务器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gunicorn-wsgi服务器"}},[t._v("#")]),t._v(" gunicorn wsgi服务器")]),t._v(" "),a("h2",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),a("p",[t._v("gunicorn是纯 Python 实现的高性能 Python 应用容器，无外部依赖，简单容易配置；没有性能问题前推荐使用gunicorn。")]),t._v(" "),a("p",[t._v("它的运行模型基于pre-fork worker 模型，既支持eventlet，也支持greenlet。")]),t._v(" "),a("blockquote",[a("p",[t._v("worker模型即一个manager多个worker，manager仅负责worker的管理，worker真正负责请求的处理")])]),t._v(" "),a("p",[t._v("其特点：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("能和大多数的Python Web框架兼容；")])]),t._v(" "),a("li",[a("p",[t._v("简单易上手；")])]),t._v(" "),a("li",[a("p",[t._v("轻量级的资源消耗；")])]),t._v(" "),a("li",[a("p",[t._v("目前，gunicorn只能运行在Linux环境中，不支持windows平台。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("支持同步worker和异步worker")])]),t._v(" "),a("blockquote",[a("p",[t._v("但是在使用中大家都是使用的同步？")])])])]),t._v(" "),a("p",[t._v("‍")]),t._v(" "),a("h2",{attrs:{id:"安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[t._v("#")]),t._v(" 安装")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("pip install gunicorn\n")])])]),a("p",[t._v("‍")]),t._v(" "),a("h2",{attrs:{id:"使用示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用示例"}},[t._v("#")]),t._v(" 使用示例")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("gunicorn app:app\t\t\t# 启动服务器\ngunicorn -b 0.0.0.0:8000 app:app\t# 监听端口号\ngunicorn -w 4 app:app\t\t\t# 启动四个工作进程处理请求\ngunicorn -D app:app\t\t\t# 以守护进程的形式后台运行\ngunicorn -c gunicorn.conf.py\t\t# 指定配置文件启动服务器\n")])])]),a("p",[t._v("配置文件示例")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("bind "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0.0.0.0:8000"')]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 绑定的主机和端口")]),t._v("\nworkers "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 工作进程的数量")]),t._v("\nthreads "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 每个工作进程的线程数")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 日志配置")]),t._v("\naccesslog "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/path/to/access.log"')]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 访问日志文件路径")]),t._v("\nerrorlog "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/path/to/error.log"')]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 错误日志文件路径")]),t._v("\nloglevel "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"info"')]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 日志级别")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# SSL/TLS 配置（可选）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# keyfile = "/path/to/private.key"  # 私钥文件路径')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# certfile = "/path/to/certificate.crt"  # 证书文件路径')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 应用程序模块名和变量名")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 例如，如果你的应用程序在 app.py 文件中的变量名为 app，则配置如下")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# module_name:variable_name")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# gunicorn -c gunicorn.conf.py "app:app"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果你的应用程序是通过 Flask 的工厂函数创建的，例如 create_app()，则配置如下")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# module_name:factory_function_name")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# gunicorn -c gunicorn.conf.py "app:create_app()"')]),t._v("\napp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"app:app"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 可选的其他配置")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# timeout = 120  # 请求超时时间（秒）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# max_requests = 1000  # 每个工作进程处理的最大请求数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# preload_app = True  # 提前加载应用程序代码")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# worker_class = "gevent"  # 工作进程使用的并发类别')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 更多配置选项和说明可以参考 Gunicorn 官方文档")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);