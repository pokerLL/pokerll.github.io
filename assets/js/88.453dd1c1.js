(window.webpackJsonp=window.webpackJsonp||[]).push([[88],{366:function(e,v,_){"use strict";_.r(v);var t=_(14),n=Object(t.a)({},(function(){var e=this,v=e._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"jinjia2-模板渲染"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#jinjia2-模板渲染"}},[e._v("#")]),e._v(" jinjia2-模板渲染")]),e._v(" "),v("h2",{attrs:{id:"概述"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),v("p",[e._v("Jinja是一个Python的模板引擎，它被广泛用于Web应用程序中的HTML模板渲染。它具有高度的可定制性，支持基于继承和模块化的模板编写，使用人性化的语法，可以方便地进行变量插值、循环迭代、条件分支、模板继承等操作。")]),e._v(" "),v("p",[e._v("Jinja的核心设计理念是分离应用程序逻辑和UI层。这意味着你可以在一个地方编写你的业务逻辑，而在另一个地方编写你的模板，然后将两者组合起来生成HTML响应。这种分离和组合的方法使得Web应用程序的开发变得更加灵活和可维护。")]),e._v(" "),v("p",[e._v("Jinja可以与多种Web框架（如Flask、Django等）无缝集成，并支持自定义扩展。此外，Jinja还具有良好的性能和缓存机制，可以提高Web应用程序的响应速度。")]),e._v(" "),v("p",[e._v("‍")]),e._v(" "),v("h2",{attrs:{id:"jinja2特性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#jinja2特性"}},[e._v("#")]),e._v(" jinja2特性")]),e._v(" "),v("ol",[v("li",[e._v("变量插值：使用双括号"),v("code",[e._v(e._s())]),e._v("​将变量嵌入到模板中。例如，"),v("code",[e._v(e._s(e.name))]),e._v("​会被Jinja2解析成相应变量的值。")]),e._v(" "),v("li",[e._v("控制结构：使用控制结构，如"),v("code",[e._v("{% if %}")]),e._v("​, "),v("code",[e._v("{% for %}")]),e._v("​, "),v("code",[e._v("{% while %}")]),e._v("​等进行条件判断和循环迭代。例如，"),v("code",[e._v("{% for item in items %} "+e._s(e.item)+" {% endfor %}")]),e._v("​会循环迭代一个名为"),v("code",[e._v("items")]),e._v("​的列表，并将每个元素渲染到模板中。")]),e._v(" "),v("li",[e._v("模板继承：使用"),v("code",[e._v("{% extends %}")]),e._v("​和"),v("code",[e._v("{% block %}")]),e._v("​实现模板继承，使得重复的HTML结构可以复用，并允许不同页面有不同的继承层次结构。")]),e._v(" "),v("li",[e._v("宏（Macro）：可以使用"),v("code",[e._v("{% macro %}")]),e._v("​定义和调用宏。宏类似于函数，可以封装一些重复的HTML结构或代码逻辑，以便复用和提高可维护性。")]),e._v(" "),v("li",[e._v("自定义过滤器：可以使用"),v("code",[e._v(e._s(e._f("filter")(e.value)))]),e._v("​语法自定义过滤器，使用类似管道的方式对变量进行预处理，例如格式化日期、转换大小写等。")]),e._v(" "),v("li",[e._v("自定义函数：使用"),v("code",[e._v("jinja2.Environment()")]),e._v("​方法创建自己的环境，并定义自定义函数进行复杂的计算和逻辑处理。")]),e._v(" "),v("li",[e._v("错误处理：通过"),v("code",[e._v("{% try %}")]),e._v("​和"),v("code",[e._v("{% except %}")]),e._v("​结构实现对特定代码块的错误检测和处理。")])]),e._v(" "),v("p",[e._v("以上是Jinja2中比较重要和经常使用到的一些特性，更全面的文档可以查看Jinja2官方文档。")]),e._v(" "),v("p",[e._v("‍")]),e._v(" "),v("h2",{attrs:{id:"使用示例"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#使用示例"}},[e._v("#")]),e._v(" 使用示例")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("from jinja2 import Environment, FileSystemLoader\n\nenv = Environment(loader=FileSystemLoader('templates'))\n\ntemplate = env.get_template('index.html')\n\nname = 'Lucas'\nitems = ['apple', 'banana', 'orange']\n\noutput = template.render(name=name, items=items)\n\nprint(output)\n")])])]),v("p",[e._v("在上面的代码中，我们首先创建了一个名为"),v("code",[e._v("env")]),e._v("​的"),v("code",[e._v("Environment")]),e._v("​对象，并使用"),v("code",[e._v("FileSystemLoader")]),e._v("​加载"),v("code",[e._v("templates")]),e._v("​目录中的模板。然后，我们使用"),v("code",[e._v("env.get_template()")]),e._v("​方法从该目录中加载名为"),v("code",[e._v("index.html")]),e._v("​的模板。")]),e._v(" "),v("p",[e._v("接着，我们定义了两个变量"),v("code",[e._v("name")]),e._v("​和"),v("code",[e._v("items")]),e._v("​，分别包含一个字符串和一个列表。最后，我们使用模板的"),v("code",[e._v("render()")]),e._v("​方法将这些变量渲染到模板中，并获取渲染后的HTML输出字符串。")]),e._v(" "),v("p",[e._v("​"),v("code",[e._v("index.html")]),e._v("​模板可能如下所示：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("<!DOCTYPE html>\n<html>\n    <head>\n        <title>My Website</title>\n    </head>\n    <body>\n        <h1>Hello, {{ name }}!</h1>\n\n        <ul>\n            {% for item in items %}\n                <li>{{ item }}</li>\n            {% endfor %}\n        </ul>\n    </body>\n</html>\n")])])]),v("p",[e._v("在这个例子中，我们在模板中使用双括号"),v("code",[e._v(e._s())]),e._v("​将变量嵌入到HTML中，并使用控制结构"),v("code",[e._v("{% for %}")]),e._v("​和"),v("code",[e._v("{% endfor %}")]),e._v("​迭代"),v("code",[e._v("items")]),e._v("​列表，并将每个元素输出为HTML列表项。")]),e._v(" "),v("p",[e._v("当我们运行上面的代码时，Jinja2会解析"),v("code",[e._v("index.html")]),e._v("​模板，将变量和控制结构渲染到模板中，并输出渲染后的HTML字符串。最后，我们将输出字符串打印到控制台中。")]),e._v(" "),v("p",[e._v("这是一个简单的使用Jinja2直接渲染模板的例子，它展示了如何加载、渲染和输出模板。")])])}),[],!1,null,null,null);v.default=n.exports}}]);