(window.webpackJsonp=window.webpackJsonp||[]).push([[382],{660:function(t,s,a){"use strict";a.r(s);var _=a(14),e=Object(_.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"运行时协议"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#运行时协议"}},[t._v("#")]),t._v(" 运行时协议")]),t._v(" "),s("h2",{attrs:{id:"概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),s("p",[t._v("Python的运行时协议（Runtime Protocol）是一种约定，定义了对象应该具备的一组方法或属性，以使它们能够在特定的上下文中使用。这些协议通常不需要显式地继承或实现特定的基类或接口，而是通过对象的实际行为来确定其是否符合协议的要求。这种灵活性使Python成为一种动态类型语言，支持鸭子类型（Duck Typing）。")]),t._v(" "),s("p",[t._v("在Python中，运行时协议的概念用于描述对象的行为和属性，而不是对象所属的类或类型。这使得代码更加灵活，因为您可以根据对象的实际特性进行操作，而不需要关心对象的具体类型。")]),t._v(" "),s("p",[t._v("以下是一些常见的运行时协议示例：")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("可迭代协议（Iterable Protocol）")]),t._v(" ：在Python中，任何具有"),s("code",[t._v("__iter__")]),t._v("​方法的对象都可以被视为可迭代对象。这意味着您可以在"),s("code",[t._v("for")]),t._v("​循环中使用它们，或者使用"),s("code",[t._v("iter()")]),t._v("​函数来获取一个迭代器。")]),t._v(" "),s("li",[s("strong",[t._v("可调用协议（Callable Protocol）")]),t._v(" ：具有"),s("code",[t._v("__call__")]),t._v("​方法的对象被视为可调用的对象，就像函数一样。您可以像调用函数一样调用它们。")]),t._v(" "),s("li",[s("strong",[t._v("可索引协议（Indexable Protocol）")]),t._v(" ：对象具有"),s("code",[t._v("__getitem__")]),t._v("​方法，并且可以使用整数作为索引来访问其元素。这适用于列表、字典等容器类型。")]),t._v(" "),s("li",[s("strong",[t._v("可比较协议（Comparable Protocol）")]),t._v(" ：具有一组特定的比较运算符（例如，"),s("code",[t._v("__eq__")]),t._v("​用于相等比较，"),s("code",[t._v("__lt__")]),t._v("​用于小于比较）的对象可以进行比较操作，例如使用"),s("code",[t._v("==")]),t._v("​或"),s("code",[t._v("<")]),t._v("​运算符。")]),t._v(" "),s("li",[s("strong",[t._v("可哈希协议（Hashable Protocol）")]),t._v(" ：具有"),s("code",[t._v("__hash__")]),t._v("​方法的对象可以被用作字典的键，因为字典需要能够对键进行哈希操作。")]),t._v(" "),s("li",[s("strong",[t._v("可上下文管理协议（Context Manager Protocol）")]),t._v(" ：具有"),s("code",[t._v("__enter__")]),t._v("​和"),s("code",[t._v("__exit__")]),t._v("​方法的对象可以用于上下文管理器，例如在"),s("code",[t._v("with")]),t._v("​语句中使用。")])]),t._v(" "),s("p",[t._v("这些协议使Python更加灵活，并允许开发人员根据对象的实际行为来编写代码，而不仅仅依赖于对象的具体类型。这种方式促进了鸭子类型，即“如果它走起来像鸭子，叫起来像鸭子，那么它就是鸭子”。这种动态性和灵活性是Python的一个强大特性，但也需要开发人员有良好的代码风格和文档，以确保代码的可读性和可维护性。")]),t._v(" "),s("p",[t._v("‍")]),t._v(" "),s("h2",{attrs:{id:"示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[t._v("#")]),t._v(" 示例")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" collections"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("abc "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" Iterable\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyIterable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__iter__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("isinstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("MyIterable"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Iterable"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# prints True")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);